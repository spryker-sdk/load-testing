openapi: 3.0.0
info:
    version: 1.0.0
    contact:
        name: Spryker
        url: 'https://support.spryker.com/'
        email: support@spryker.com
    title: 'Spryker API'
    license:
        name: MIT
tags:
    -
        name: access-tokens
    -
        name: addresses
    -
        name: alternative-product-offers
    -
        name: cart-codes
    -
        name: cart-merchant-timeslots
    -
        name: carts
    -
        name: catalog-search-product-offers
    -
        name: catalog-search-suggestions-product-offers
    -
        name: category-nodes
    -
        name: category-trees
    -
        name: checkout
    -
        name: checkout-data
    -
        name: checkout-testing
    -
        name: code-authorize
    -
        name: concrete-product-availabilities
    -
        name: concrete-product-image-sets
    -
        name: concrete-product-prices
    -
        name: concrete-products
    -
        name: customer-fixture
    -
        name: customer-forgotten-password
    -
        name: customer-password
    -
        name: customer-restore-password
    -
        name: customers
    -
        name: first-data-notifications
    -
        name: fixtures
    -
        name: health-check
    -
        name: import-categories
    -
        name: import-merchant_pos
    -
        name: import-product_categories
    -
        name: import-product_images
    -
        name: import-product_offers
    -
        name: import-product_prices
    -
        name: import-products
    -
        name: instacart-callbacks
    -
        name: items
    -
        name: merchant-addresses
    -
        name: merchant-category-trees
    -
        name: merchant-opening-hours
    -
        name: merchant-search
    -
        name: merchant-timeslot-reservations
    -
        name: merchants
    -
        name: orders
    -
        name: payment-methods
    -
        name: preview-delivery-timeslots
    -
        name: preview-pickup-timeslots
    -
        name: product-measurement-units
    -
        name: product-offer-prices
    -
        name: product-offers
    -
        name: refresh-tokens
    -
        name: return-reasons
    -
        name: returns
    -
        name: sales-units
    -
        name: stores
    -
        name: token
servers:
    -
        url: 'https://api.us.aldi.local'
paths:
    /access-tokens:
        post:
            summary: 'Creates access token for user.'
            tags:
                - access-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestAccessTokensRequest'
            operationId: create-access-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponseResponse'
                400:
                    description: 'Bad request'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /refresh-tokens:
        post:
            summary: 'Refreshes customer''s auth token.'
            tags:
                - refresh-tokens
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestRefreshTokensRequest'
            operationId: create-refresh-tokens
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponseResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                401:
                    description: 'Failed to authenticate user.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/refresh-tokens/{refreshTokenId}':
        delete:
            summary: 'Revokes customer''s refresh token.'
            tags:
                - refresh-tokens
            parameters:
                -
                    name: refreshTokenId
                    in: path
                    required: true
                    description: 'Id of refresh token.'
                    schema:
                        type: string
                -
                    name: Accept-Language
                    in: header
                    required: false
                    description: 'Locale value relevant for the store.'
                    schema:
                        type: string
            security:
                -
                    BearerAuth: []
            operationId: delete-refresh-tokens
            responses:
                204:
                    description: 'No content.'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/stores/{storeId}':
        get:
            summary: 'Retrieves current store data.'
            tags:
                - stores
            parameters:
                -
                    name: storeId
                    in: path
                    required: true
                    description: 'Id of store.'
                    schema:
                        type: string
                        example: US
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-stores
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StoresRestResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /stores:
        get:
            summary: 'Retrieves current store data.'
            tags:
                - stores
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-stores
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StoresRestCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}/concrete-product-availabilities':
        get:
            summary: 'Retrieves concrete product availabilities.'
            tags:
                - concrete-product-availabilities
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-availabilities
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Concrete product availability not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /category-trees:
        get:
            summary: 'Retrieves category tree for specified locale.'
            tags:
                - category-trees
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-category-trees
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCategoryTreesCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/category-nodes/{categoryNodeId}':
        get:
            summary: 'Retrieves a category node by id.'
            tags:
                - category-nodes
            parameters:
                -
                    name: categoryNodeId
                    in: path
                    required: true
                    description: 'Id of category node.'
                    schema:
                        type: string
                        example: 1
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-category-nodes
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCategoryNodesResponse'
                400:
                    description: 'Category node id has not been specified or invalid.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Category node not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}':
        get:
            summary: 'Retrieves customer data.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: DE--1
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - addresses
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Customer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        patch:
            summary: 'Updates customer data.'
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - addresses
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomersRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Failed to save customer.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Customer with this email already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        delete:
            summary: 'Anonymizes customers.'
            tags:
                - customers
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - addresses
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: delete-customers
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Customer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /customers:
        get:
            summary: 'Retrieves customers collection.'
            tags:
                - customers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - addresses
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            operationId: get-collection-of-customers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        post:
            summary: 'Creates customer.'
            tags:
                - customers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - addresses
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomersRequest'
            operationId: create-customers
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomersResponse'
                400:
                    description: 'Terms and Conditions was not accepted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Customer with this email already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /customer-forgotten-password:
        post:
            summary: 'Sends password restoration email.'
            tags:
                - customer-forgotten-password
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerForgottenPasswordRequest'
            operationId: create-customer-forgotten-password
            responses:
                204:
                    description: 'No content.'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customer-restore-password/{customerRestorePasswordId}':
        patch:
            summary: 'Restores customer password.'
            tags:
                - customer-restore-password
            parameters:
                -
                    name: customerRestorePasswordId
                    in: path
                    required: true
                    description: 'Id of customer restore password.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerRestorePasswordRequest'
            operationId: update-customer-restore-password
            responses:
                204:
                    description: 'No content.'
                400:
                    description: 'Customer restore password id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Restore password key is not valid.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}':
        get:
            summary: 'Retrieves product concrete by id.'
            tags:
                - concrete-products
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - concrete-product-image-sets
                            - product-options
                            - abstract-products
                            - product-offers
                            - product-measurement-units
                            - sales-units
                            - product-labels
                        items:
                            type: string
            operationId: get-concrete-products
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConcreteProductsRestResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Concrete product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}/concrete-product-prices':
        get:
            summary: 'Retrieves concrete product prices.'
            tags:
                - concrete-product-prices
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-prices
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductPricesCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Concrete product prices not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}':
        get:
            summary: 'Retrieves a cart by id.'
            prepareDataSteps:
                - CreateCustomer
                - CreateAccessToken
                - CreateCart
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        patch:
            summary: 'Updates a cart.'
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Can’t switch price mode when there are items in the cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        delete:
            summary: 'Deletes cart by id.'
            tags:
                - carts
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: delete-carts
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Cart could not be deleted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /carts:
        get:
            summary: 'Retrieves list of all customer''s carts.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - carts
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-carts
            deprecated: true
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        post:
            summary: 'Creates a cart.'
            tags:
                - carts
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Customer already has a cart.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/items':
        post:
            summary: 'Adds an item to the cart.'
            prepareDataSteps:
                - CreateCustomer
                - CreateAccessToken
                - CreateCart
                - AddToCart
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-items
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Errors appeared during item creation.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/items/{itemId}':
        patch:
            summary: 'Updates cart item quantity.'
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: itemId
                    in: path
                    required: true
                    description: 'Id of item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-carts-items
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id or item id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart or item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Errors appeared during item update.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        delete:
            summary: 'Removes item from the cart.'
            tags:
                - items
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: itemId
                    in: path
                    required: true
                    description: 'Id of item.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-items
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Cart id or item id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart or cart item not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Cart item could not be deleted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}/concrete-product-image-sets':
        get:
            summary: 'Retrieves concrete product image sets.'
            tags:
                - concrete-product-image-sets
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-concrete-products-concrete-product-image-sets
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductImageSetsCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Concrete product image sets not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/orders/{orderId}':
        get:
            summary: 'Retrieves order by id.'
            prepareDataSteps:
                - CreateCustomer
                - CreateAccessToken
                - CreateCart
                - AddToCart
                - Checkout
            tags:
                - orders
            parameters:
                -
                    name: orderId
                    in: path
                    required: true
                    description: 'Id of order.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchants
                            - concrete-products
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-orders
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrderDetailsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Order not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /orders:
        get:
            summary: 'Retrieves list of orders.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - orders
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchants
                            - concrete-products
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-orders
            deprecated: true
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrdersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customer-password/{customerPasswordId}':
        patch:
            summary: 'Updates customer password.'
            tags:
                - customer-password
            parameters:
                -
                    name: customerPasswordId
                    in: path
                    required: true
                    description: 'Id of customer password.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerPasswordRequest'
            security:
                -
                    BearerAuth: []
            operationId: update-customer-password
            responses:
                204:
                    description: 'Expected response to a valid request.'
                400:
                    description: 'Passwords don''t match.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Customer unauthorized.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                406:
                    description: 'Invalid password.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}/addresses':
        get:
            summary: 'Retrieves list of all customer addresses.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: 'DE--1'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSalesforceAddressCollectionResponse'
                400:
                    description: 'Failed to retrieve addresses.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: 'Technical issue. External address service isn''t available.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        post:
            summary: 'Creates customer address.'
            tags:
                - addresses
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestSalesforceAddressRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-customers-addresses
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSalesforceAddressResponse'
                400:
                    description: 'Failed to retrieve addresses.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: 'Technical issue. External address service isn''t available.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /checkout-data:
        post:
            summary: |
                Provides checkout data
                 - available addresses
                 - shipment methods
                 - payment methods
            tags:
                - checkout-data
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: X-Anonymous-Customer-Unique-Id
                    in: header
                    required: false
                    description: 'Guest customer unique ID.'
                    schema:
                        type: string
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - shipment-methods
                            - payment-methods
                            - carts
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCheckoutRequestRequest'
            operationId: create-checkout-data
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCheckoutDataResponseResponse'
                400:
                    description: 'Bad Response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /checkout:
        post:
            summary: 'Places order.'
            tags:
                - checkout
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: X-Anonymous-Customer-Unique-Id
                    in: header
                    required: false
                    description: 'Guest customer unique ID.'
                    schema:
                        type: string
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - orders
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCheckoutRequest'
            operationId: create-checkout
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCheckoutResponseResponse'
                400:
                    description: 'Bad Response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/health-check/{healthCheckId}':
        get:
            summary: 'Retrieve services status.'
            tags:
                - health-check
            parameters:
                -
                    name: healthCheckId
                    in: path
                    required: true
                    description: 'Id of health check.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-health-check
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestHealthCheckResponseResponse'
                400:
                    description: 'Bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Services are disabled.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                503:
                    description: 'Services are unavailable.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /return-reasons:
        get:
            summary: 'Retrieves list of return reasons.'
            tags:
                - return-reasons
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-return-reasons
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestReturnReasonsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/returns/{returnId}':
        get:
            summary: 'Retrieves return by id.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - returns
            parameters:
                -
                    name: returnId
                    in: path
                    required: true
                    description: 'Id of return.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - return-items
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-returns
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestReturnsResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Return not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /returns:
        get:
            summary: 'Retrieves list of returns.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - returns
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - return-items
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-returns
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestReturnRequestCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        post:
            summary: 'Creates a return.'
            tags:
                - returns
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - return-items
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestReturnRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-returns
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestReturnRequestResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/cart-codes':
        post:
            summary: 'Adds a code to cart.'
            tags:
                - cart-codes
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartCodeRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-cart-codes
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartCodeRequestResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Cart code can''t be added.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/cart-codes/{code}':
        delete:
            summary: 'Deletes a code from cart.'
            tags:
                - cart-codes
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    name: code
                    in: path
                    required: true
                    description: 'Id of .'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: delete-carts-cart-codes
            responses:
                204:
                    description: 'Expected response to a valid request.'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Cart code can''t be removed.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/merchants/{merchantId}':
        get:
            summary: 'Retrieves a merchant by id.'
            tags:
                - merchants
            parameters:
                -
                    name: merchantId
                    in: path
                    required: true
                    description: 'Id of merchant.'
                    schema:
                        type: string
                        example: '474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchant-addresses
                            - merchant-opening-hours
                        items:
                            type: string
            operationId: get-merchants
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantsResponse'
                400:
                    description: 'Merchant identifier is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /merchants:
        get:
            summary: 'Retrieves list of merchants.'
            tags:
                - merchants
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchant-addresses
                            - merchant-opening-hours
                        items:
                            type: string
            operationId: get-collection-of-merchants
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantsCollectionResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/merchants/{merchantId}/merchant-addresses':
        get:
            summary: 'Retrieves merchant addresses.'
            tags:
                - merchant-addresses
            parameters:
                -
                    name: merchantId
                    in: path
                    required: true
                    description: 'Id of merchant.'
                    schema:
                        type: string
                        example: '474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-merchants-merchant-addresses
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantAddressesCollectionResponse'
                400:
                    description: 'Merchant identifier is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/product-offers/{productOfferId}':
        get:
            summary: 'Retrieves a collection of product offers.'
            tags:
                - product-offers
            parameters:
                -
                    name: productOfferId
                    in: path
                    required: true
                    description: 'Id of product offer.'
                    schema:
                        type: string
                        example: '011115871324_474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchants
                            - concrete-products
                            - product-offer-prices
                            - concrete-product-image-sets
                            - product-labels
                        items:
                            type: string
            operationId: get-product-offers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductOffersResponse'
                400:
                    description: 'Product offer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Product offer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}/product-offers':
        get:
            summary: 'Retrieves a collection of product offers for product concrete.'
            tags:
                - product-offers
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: merchantReference
                    in: query
                    required: true
                    description: 'Merchant reference to be used for filtering results.'
                    schema:
                        type: string
                        example: '474-001'
                -
                    name: serviceType
                    in: query
                    required: false
                    description: 'Service type to be used for filtering results.'
                    schema:
                        type: string
                -
                    name: Merchant-Reference
                    in: header
                    required: false
                    description: 'Merchant reference.'
                    deprecated: true
                    schema:
                        type: string
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchants
                            - concrete-products
                            - product-offer-prices
                            - concrete-product-image-sets
                            - product-labels
                        items:
                            type: string
            operationId: get-collection-of-concrete-products-product-offers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductOffersCollectionResponse'
                400:
                    description: 'Product concrete SKU is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant or product concrete not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /preview-pickup-timeslots:
        get:
            summary: 'Retrieves list of merchant pickup timeslots for preview.'
            tags:
                - preview-pickup-timeslots
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: merchantReference
                    in: query
                    required: true
                    description: 'Merchant reference to be used for delivery searching.'
                    schema:
                        type: string
                        example: 474-002
            operationId: get-collection-of-preview-pickup-timeslots
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantTimeslotsCollectionResponse'
                400:
                    description: 'Merchant reference is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/merchant-timeslot-reservations':
        post:
            summary: 'Reserve pre-selected timeslot from a cart.'
            tags:
                - merchant-timeslot-reservations
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestMerchantTimeslotReservationsRequestRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-merchant-timeslot-reservations
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart with given uuid not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Reservation is not possible.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/cart-merchant-timeslots':
        get:
            summary: 'Retrieves list of cart merchant timeslots for selection.'
            prepareDataSteps:
                - CreateCustomer
                - CreateAccessToken
                - CreateCart
                - AddToCart
            tags:
                - cart-merchant-timeslots
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-carts-cart-merchant-timeslots
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantTimeslotsCollectionResponse'
                400:
                    description: 'Cart ID is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Missing access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /catalog-search-product-offers:
        get:
            summary: 'Catalog search product offers.'
            tags:
                - catalog-search-product-offers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
                        example: 'Cookies and Cream Cheesecake Jar'
                -
                    name: Merchant-Reference
                    in: header
                    required: false
                    description: 'Merchant reference to be used for filtering results.'
                    deprecated: true
                    schema:
                        type: string
                -
                    name: merchantReference
                    in: query
                    required: true
                    description: 'Merchant reference to be used for filtering results.'
                    schema:
                        type: string
                        example: 474-002
                -
                    name: serviceType
                    in: query
                    required: false
                    description: 'Service type to be used for filtering results.'
                    schema:
                        type: string
                -
                    name: category
                    in: query
                    required: false
                    description: 'Category facet filter parameter'
                    schema:
                        type: integer
                        example: '5'
                -
                    name: category_slug
                    in: query
                    required: false
                    description: 'Category facet filter parameter'
                    schema:
                        type: string
                        example: produce/fresh-fruits
                -
                    name: 'price[min]'
                    in: query
                    required: false
                    description: 'Price range facet filter parameter: Minimum value'
                    schema:
                        type: number
                        example: '1.01'
                -
                    name: 'price[max]'
                    in: query
                    required: false
                    description: 'Price range facet filter parameter: Maximum value'
                    schema:
                        type: number
                        example: '2.02'
                -
                    name: 'page[offset]'
                    in: query
                    required: false
                    description: 'Pagination parameters: Offset'
                    schema:
                        type: integer
                        example: '1'
                -
                    name: 'page[limit]'
                    in: query
                    required: false
                    description: 'Pagination parameters: Limit'
                    schema:
                        type: integer
                        enum:
                            - '16'
                            - '32'
                            - '48'
                        example: '32'
                -
                    name: sort
                    in: query
                    required: false
                    description: 'Sorting parameters.'
                    schema:
                        type: string
                        enum:
                            - rating
                            - name_asc
                            - name_desc
                            - price_asc
                            - price_desc
                        example: name_asc
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - product-offers
                        items:
                            type: string
            operationId: get-collection-of-catalog-search-product-offers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCatalogSearchProductOffersCollectionResponse'
                400:
                    description: 'Merchant identifier is not specified or invalid request parameters.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Invalid request parameters.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /catalog-search-suggestions-product-offers:
        get:
            summary: 'Catalog search suggestions product offers.'
            tags:
                - catalog-search-suggestions-product-offers
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: q
                    in: query
                    required: false
                    description: 'Search query string.'
                    schema:
                        type: string
                        example: brockkoli
                -
                    name: merchantReference
                    in: query
                    required: true
                    description: 'Merchant reference to be used for filtering results.'
                    schema:
                        type: string
                        example: 474-001
                -
                    name: serviceType
                    in: query
                    required: false
                    description: 'Service type to be used for filtering results.'
                    schema:
                        type: string
                -
                    name: Merchant-Reference
                    in: header
                    required: false
                    description: 'Merchant reference to be used for filtering results.'
                    deprecated: true
                    schema:
                        type: string
                        example: 474-002
            operationId: get-collection-of-catalog-search-suggestions-product-offers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCatalogSearchSuggestionsProductOffersCollectionResponse'
                400:
                    description: 'Merchant identifier is not specified or invalid request parameters.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/product-offers/{productOfferId}/alternative-product-offers':
        get:
            summary: 'Retrieves a collection of alternative products by product offer item.'
            tags:
                - alternative-product-offers
            parameters:
                -
                    name: productOfferId
                    in: path
                    required: true
                    description: 'Id of product offer.'
                    schema:
                        type: string
                        example: '011115871324_474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-product-offers-alternative-product-offers
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductOffersCollectionResponse'
                400:
                    description: 'Product offer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Product offer not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /merchant-search:
        get:
            summary: 'Retrieves merchants collection.'
            tags:
                - merchant-search
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: serviceType
                    in: query
                    required: true
                    description: 'Defines the service type the merchants should be available for.'
                    schema:
                        type: string
                        enum:
                            - delivery
                            - pickup
                            - instore
                        example: pickup
                -
                    name: zipCode
                    in: query
                    required: false
                    description: 'Pickup or delivery zip code.'
                    schema:
                        type: string
                        example: '32836'
                -
                    name: address
                    in: query
                    required: false
                    description: 'Address to deliver to. Required for delivery serviceType only.'
                    schema:
                        type: string
                        example: '513, Fifth Ave.'
                -
                    name: latitude
                    in: query
                    required: false
                    description: 'Latitude for delivery/pickup/instore.'
                    schema:
                        type: string
                -
                    name: longitude
                    in: query
                    required: false
                    description: 'Longitude for delivery/pickup/instore.'
                    schema:
                        type: string
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchant-opening-hours
                        items:
                            type: string
            operationId: get-collection-of-merchant-search
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantSearchResponseCollectionResponse'
                400:
                    description: 'Please enter a valid location or use location without address and zip code.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Bad response from data provider.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/merchants/{merchantId}/merchant-opening-hours':
        get:
            summary: 'Retrieves merchant opening hours.'
            tags:
                - merchant-opening-hours
            parameters:
                -
                    name: merchantId
                    in: path
                    required: true
                    description: 'Id of merchant.'
                    schema:
                        type: string
                        example: '474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-collection-of-merchants-merchant-opening-hours
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantOpeningHoursCollectionResponse'
                400:
                    description: 'Merchant identifier is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /instacart-callbacks:
        post:
            summary: 'Process callback from the Instacart. See https://connect-docs.instacart.com/delivery/order_callbacks'
            tags:
                - instacart-callbacks
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestInstacartCallbacksRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-instacart-callbacks
            responses:
                200:
                    description: 'Order update request was processed correctly.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestInstacartCallbacksResponse'
                400:
                    description: 'Operation was aborted or empty request body.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Order not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                405:
                    description: 'Operation is not allowed for this order.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /merchant-category-trees:
        get:
            summary: 'Retrieves category tree for specified merchant.'
            tags:
                - merchant-category-trees
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: Merchant-Reference
                    in: header
                    required: true
                    description: 'Merchant reference.'
                    schema:
                        type: string
                        example: 474-001
            operationId: get-collection-of-merchant-category-trees
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantCategoryTreesCollectionResponse'
                400:
                    description: 'Merchant reference is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/product-offers/{productOfferId}/product-offer-prices':
        get:
            summary: 'Retrieves collection of product-offer-prices.'
            tags:
                - product-offer-prices
            parameters:
                -
                    name: productOfferId
                    in: path
                    required: true
                    description: 'Id of product offer.'
                    schema:
                        type: string
                        example: '011115871324_474-001'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: serviceType
                    in: query
                    required: false
                    description: 'Service type to be used for filtering results.'
                    schema:
                        type: string
            operationId: get-collection-of-product-offers-product-offer-prices
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductOfferPricesCollectionResponse'
                400:
                    description: 'Product offer id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /preview-delivery-timeslots:
        get:
            summary: 'Retrieves list of merchant delivery timeslots for preview.'
            tags:
                - preview-delivery-timeslots
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: zipCode
                    in: query
                    required: true
                    description: 'The zip code for delivery.'
                    schema:
                        type: integer
                        example: '32836'
                -
                    name: merchantReference
                    in: query
                    required: true
                    description: 'Merchant reference to be used for delivery searching.'
                    schema:
                        type: string
                        example: 474-002
            operationId: get-collection-of-preview-delivery-timeslots
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestMerchantTimeslotsCollectionResponse'
                400:
                    description: 'Merchant reference or location is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Merchant or location is not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /token:
        post:
            summary: 'Create token.'
            tags:
                - token
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestTokenRequest'
            operationId: create-token
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestTokenResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /first-data-notifications:
        post:
            summary: 'Create first data notifications.'
            tags:
                - first-data-notifications
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestFirstDataNotificationsRequest'
            operationId: create-first-data-notifications
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestFirstDataNotificationsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /code-authorize:
        post:
            summary: 'Create code authorize.'
            tags:
                - code-authorize
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCodeAuthorizeRequest'
            operationId: create-code-authorize
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCodeAuthorizeResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}/carts':
        get:
            summary: 'Retrieves list of carts.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - carts
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: 'DE--1'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - cart-rules
                            - items
                            - promotional-items
                            - gift-cards
                            - bundle-items
                            - merchants
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-carts
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}/orders':
        get:
            summary: 'Retrieves list of orders.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - orders
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: 'DE--1'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - merchants
                            - concrete-products
                        items:
                            type: string
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-orders
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestOrdersCollectionResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/product-measurement-units/{productMeasurementUnitId}':
        get:
            summary: 'Retrieves product measurement unit by code.'
            tags:
                - product-measurement-units
            parameters:
                -
                    name: productMeasurementUnitId
                    in: path
                    required: true
                    description: 'Id of product measurement unit.'
                    schema:
                        type: string
                        example: ITEM
                -
                    $ref: '#/components/parameters/acceptLanguage'
            operationId: get-product-measurement-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestProductMeasurementUnitsResponse'
                400:
                    description: 'Resource id has not been specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Product measurement unit not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/concrete-products/{concreteProductId}/sales-units':
        get:
            summary: 'Retrieves a collection of sales units.'
            tags:
                - sales-units
            parameters:
                -
                    name: concreteProductId
                    in: path
                    required: true
                    description: 'Id of concrete product.'
                    schema:
                        type: string
                        example: '012993112028'
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: include
                    in: query
                    required: false
                    schema:
                        type: array
                        example:
                            - product-measurement-units
                        items:
                            type: string
            operationId: get-collection-of-concrete-products-sales-units
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestSalesUnitsCollectionResponse'
                400:
                    description: 'Concrete product id is not specified.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Concrete product not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-products:
        post:
            summary: 'Create import products.'
            tags:
                - import-products
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-products
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-product_prices:
        post:
            summary: 'Create import product_prices.'
            tags:
                - import-product_prices
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-product_prices
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-product_images:
        post:
            summary: 'Create import product_images.'
            tags:
                - import-product_images
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-product_images
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-product_offers:
        post:
            summary: 'Create import product_offers.'
            tags:
                - import-product_offers
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-product_offers
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-product_categories:
        post:
            summary: 'Create import product_categories.'
            tags:
                - import-product_categories
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-product_categories
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-categories:
        post:
            summary: 'Create import categories.'
            tags:
                - import-categories
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-categories
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /import-merchant_pos:
        post:
            summary: 'Create import merchant_pos.'
            tags:
                - import-merchant_pos
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestImportsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-import-merchant_pos
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestImportsResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}/payment-methods/{paymentMethodId}':
        get:
            summary: 'Retrieves customer payment method by id.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - payment-methods
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: 'DE--1'
                -
                    name: paymentMethodId
                    in: path
                    required: true
                    description: 'Id of payment method.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-customers-payment-methods
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomerPaymentMethodsResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Customer payment method not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/customers/{customerId}/payment-methods':
        get:
            summary: 'Retrieves list of customer payment methods.'
            prepareDataSteps:
                - CreateAccessTokenForExistingUser
            tags:
                - payment-methods
            parameters:
                -
                    name: customerId
                    in: path
                    required: true
                    description: 'Id of customer.'
                    schema:
                        type: string
                        example: 'DE--1'
                -
                    $ref: '#/components/parameters/acceptLanguage'
            security:
                -
                    BearerAuth: []
            operationId: get-collection-of-customers-payment-methods
            responses:
                200:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomerPaymentMethodsCollectionResponse'
                401:
                    description: 'Invalid access token.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /customer-fixture:
        post:
            summary: 'Creates customer.'
            tags:
                - customer-fixture
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCustomerFixturesRequest'
            operationId: create-customer-fixture
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCustomerFixturesResponse'
                400:
                    description: 'Terms and Conditions was not accepted.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Customer with this email already exists.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    '/carts/{cartId}/fixtures':
        post:
            summary: 'Adds an item to the cart.'
            tags:
                - fixtures
            parameters:
                -
                    name: cartId
                    in: path
                    required: true
                    description: 'Id of cart.'
                    schema:
                        type: string
                -
                    $ref: '#/components/parameters/acceptLanguage'
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCartItemsRequest'
            security:
                -
                    BearerAuth: []
            operationId: create-carts-fixtures
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCartsResponse'
                400:
                    description: 'Cart id is missing.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                403:
                    description: 'Unauthorized cart action.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                404:
                    description: 'Cart not found.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Errors appeared during item creation.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /checkout-testing:
        post:
            summary: 'Places order.'
            tags:
                - checkout-testing
            parameters:
                -
                    $ref: '#/components/parameters/acceptLanguage'
                -
                    name: X-Anonymous-Customer-Unique-Id
                    in: header
                    required: false
                    description: 'Guest customer unique ID.'
                    schema:
                        type: string
            requestBody:
                description: 'Expected request body.'
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RestCheckoutRequestRequest'
            operationId: create-checkout-testing
            responses:
                201:
                    description: 'Expected response to a valid request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RestCheckoutResponseResponse'
                400:
                    description: 'Bad Response.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                422:
                    description: 'Unprocessable entity.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                default:
                    description: 'Expected response to a bad request.'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
    schemas:
        ConcreteProductsRestAttributes:
            properties:
                sku:
                    type: string
                isDiscontinued:
                    type: boolean
                    enum:
                        - true
                        - false
                discontinuedNote:
                    type: string
                averageRating:
                    type: number
                reviewCount:
                    type: integer
                productAbstractSku:
                    type: string
                name:
                    type: string
                description:
                    type: string
                attributes:
                    type: array
                    items: {  }
                superAttributesDefinition:
                    type: array
                    items: {  }
                metaTitle:
                    type: string
                metaKeywords:
                    type: string
                metaDescription:
                    type: string
                attributeNames:
                    type: array
                    items: {  }
                packagingUnit:
                    $ref: '#/components/schemas/RestProductConcretePackagingUnitsAttributes'
                quantityMax:
                    type: integer
                quantityMin:
                    type: integer
                quantityInterval:
                    type: integer
                randomWeightType:
                    type: string
                    enum:
                        - '0'
                        - '1'
                        - '2'
                        - '3'
                urlSlugText:
                    type: string
        ConcreteProductsRestIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductOffersCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                    -
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
            type: array
        ConcreteProductsRestRelationships:
            properties:
                concrete-product-image-sets:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-options:
                    $ref: '#/components/schemas/RestRelationshipsData'
                abstract-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-offers:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-measurement-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
                sales-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-labels:
                    $ref: '#/components/schemas/RestRelationshipsData'
        ConcreteProductsRestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/ConcreteProductsRestIncluded'
        ConcreteProductsRestResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/ConcreteProductsRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/ConcreteProductsRestRelationships'
        ErrorResponse:
            properties:
                errors:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestErrorMessage'
        FirstDataCreditCardParameters:
            properties:
                txntype:
                    type: string
                    example: preauth
                timezone:
                    type: string
                    example: Etc/UTC
                txndatetime:
                    type: string
                    example: '2021:09:10-09:09:55'
                hashAlgorithm:
                    type: string
                    example: HMACSHA256
                hashExtended:
                    type: string
                    example: Avk+pC5Pkk7zRTItSMUfRvJKFTLrjm11J9A0AEBZJGs=
                oid:
                    type: string
                    example: 423b9091ca1e
                storename:
                    type: string
                    example: '12022224560'
                chargetotal:
                    type: string
                    example: '48.68'
                currency:
                    type: string
                    example: '840'
                authenticateTransaction:
                    type: boolean
                    example: 'false'
                    enum:
                        - true
                        - false
                transactionNotificationURL:
                    type: string
                    example: 'http://glue.us.aldi.local/first-data-notifications'
                responseSuccessURL:
                    type: string
                    example: 'http://yves.us.aldi.local/checkout-success'
                responseFailURL:
                    type: string
                    example: 'http://yves.us.aldi.local/checkout-failure'
                bname:
                    type: string
                    example: 'John Doe'
                baddr1:
                    type: string
                    example: 'Chrystie St, 1'
                baddr2:
                    type: string
                    example: 'Chrystie St, 2'
                bcity:
                    type: string
                    example: Huston
                bstate:
                    type: string
                    example: US-IL
                bcountry:
                    type: string
                    example: US
                bzip:
                    type: string
                    example: '12312'
                phone:
                    type: string
                    example: '4930207372065'
                email:
                    type: string
                    example: sonia@spryker.com
                sname:
                    type: string
                    example: 'John Doe'
                saddr1:
                    type: string
                    example: 'Chrystie St, 1'
                saddr2:
                    type: string
                    example: 'Chrystie St, 2'
                scity:
                    type: string
                    example: Chicago
                sstate:
                    type: string
                    example: US-IL
                scountry:
                    type: string
                    example: US
                szip:
                    type: string
                    example: '12312'
                mobileMode:
                    type: boolean
                    example: 'false'
                    enum:
                        - true
                        - false
                checkoutoption:
                    type: string
                    example: combinedpage
                language:
                    type: string
                    example: en_US
                assignToken:
                    type: boolean
                    example: 'true'
                    enum:
                        - true
                        - false
                tokenType:
                    type: string
                    example: MULTIPAY
                declineHostedDataDuplicates:
                    type: boolean
                    example: 'false'
                    enum:
                        - true
                        - false
                customerid:
                    type: string
                    example: DE--21
        HealthCheckServiceResponse:
            properties:
                name:
                    type: string
                status:
                    type: boolean
                    enum:
                        - true
                        - false
                message:
                    type: string
        RestAccessTokensRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestAccessTokensRequestData'
        RestAccessTokensRequestAttributes:
            properties:
                username:
                    type: string
                    format: email
                password:
                    type: string
                    format: password
            required:
                - username
                - password
        RestAccessTokensRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - access-tokens
                attributes:
                    $ref: '#/components/schemas/RestAccessTokensRequestAttributes'
        RestAddress:
            properties:
                id:
                    type: string
                    format: uuid
                salutation:
                    type: string
                    enum:
                        - Mr
                        - Mrs
                        - Dr
                        - Ms
                firstName:
                    type: string
                    example: Sonia
                    maxLength: 100
                lastName:
                    type: string
                    example: Wagner
                    maxLength: 100
                address1:
                    type: string
                    example: '203 Fifth Ave'
                    maxLength: 255
                address2:
                    type: string
                    example: '17th floor'
                    maxLength: 255
                address3:
                    type: string
                    example: 'Office 1716'
                    maxLength: 255
                zipCode:
                    type: string
                    pattern: '/\d{5}([ \-]\d{4})?/'
                    example: '10013'
                city:
                    type: string
                    example: 'New York'
                    maxLength: 255
                country:
                    type: string
                iso2Code:
                    type: string
                    format: iso2
                    enum:
                        - US
                company:
                    type: string
                    example: Spryker
                    maxLength: 255
                phone:
                    type: string
                    example: '1 800-123-0000'
                    maxLength: 255
                isDefaultBilling:
                    type: boolean
                    default: 'false'
                    enum:
                        - true
                        - false
                isDefaultShipping:
                    type: boolean
                    default: 'false'
                    enum:
                        - true
                        - false
                countryIsoCode:
                    type: string
                    format: iso2
                    example: US
                    description: 'Country ISO code.'
                    enum:
                        - US
                regionIso2Code:
                    type: string
                    example: US-CA
                    maxLength: 5
                regionIsoCode:
                    type: string
                    example: CA
                    maxLength: 2
                    description: 'Region ISO code.'
        RestAddressTransfer:
            properties:
                id:
                    type: string
                    format: uuid
                salutation:
                    type: string
                    enum:
                        - Mr
                        - Mrs
                        - Dr
                        - Ms
                firstName:
                    type: string
                    example: Sonia
                    maxLength: 100
                lastName:
                    type: string
                    example: Wagner
                    maxLength: 100
                address1:
                    type: string
                    example: '203 Fifth Ave'
                    maxLength: 255
                address2:
                    type: string
                    example: '17th floor'
                    maxLength: 255
                address3:
                    type: string
                    example: 'Office 1716'
                    maxLength: 255
                zipCode:
                    type: string
                    pattern: '/\d{5}([ \-]\d{4})?/'
                    example: '10013'
                city:
                    type: string
                    example: 'New York'
                    maxLength: 255
                iso2Code:
                    type: string
                    format: iso2
                    enum:
                        - US
                company:
                    type: string
                    example: Spryker
                    maxLength: 255
                phone:
                    type: string
                    example: '1 800-123-0000'
                    maxLength: 255
                isDefaultBilling:
                    type: boolean
                    default: 'false'
                    enum:
                        - true
                        - false
                isDefaultShipping:
                    type: boolean
                    default: 'false'
                    enum:
                        - true
                        - false
                countryIsoCode:
                    type: string
                    format: iso2
                    example: US
                    description: 'Country ISO code.'
                    enum:
                        - US
                regionIso2Code:
                    type: string
                    example: US-CA
                    maxLength: 5
                regionIsoCode:
                    type: string
                    example: CA
                    maxLength: 2
                    description: 'Region ISO code.'
            required:
                - salutation
                - firstName
                - lastName
                - address1
                - address2
                - address3
                - zipCode
                - city
                - iso2Code
                - company
                - phone
                - countryIsoCode
        RestCalculatedDiscount:
            properties:
                unitAmount:
                    type: integer
                    example: '10'
                    description: 'Amount of discount units.'
                sumAmount:
                    type: integer
                    example: '100'
                    description: 'Summary of discount.'
                displayName:
                    type: string
                    example: 'New Year discount'
                    description: 'Name of Discount.'
                description:
                    type: string
                    example: 'New Year discount for all items'
                    description: 'Description of discount.'
                voucherCode:
                    type: string
                    example: NEWYEAR2021
                    description: 'Voucher code.'
                quantity:
                    type: integer
                    example: '1'
                    description: 'Amount of discounts.'
        RestCartCodeRequestAttributes:
            properties:
                code:
                    type: string
        RestCartCodeRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartCodeRequestRequestData'
        RestCartCodeRequestRequestAttributes:
            properties: {  }
        RestCartCodeRequestRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - cart-codes
                attributes:
                    $ref: '#/components/schemas/RestCartCodeRequestRequestAttributes'
        RestCartCodeRequestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartCodeRequestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCartCodeRequestResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartCodeRequestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCartExpenseAttributes:
            properties:
                name:
                    type: string
                    example: 'Rapid Delivery'
                    description: 'Expense name.'
                    enum:
                        - Curbside
                        - 'Rapid Delivery'
                        - 'Alcohol fee'
                type:
                    type: string
                    example: SHIPMENT_EXPENSE_TYPE
                    description: 'Expense type, for example: ALCOHOL_FEE_EXPENSE_TYPE.'
                    enum:
                        - SHIPMENT_EXPENSE_TYPE
                        - ALCOHOL_FEE_EXPENSE_TYPE
                quantity:
                    type: integer
                    example: '1'
                calculations:
                    $ref: '#/components/schemas/RestCartExpenseCalculations'
        RestCartExpenseCalculations:
            properties:
                unitPrice:
                    type: integer
                    example: '299'
                sumPrice:
                    type: integer
                    example: '299'
                taxRate:
                    type: integer
                    example: '0'
                unitDiscountAmountAggregation:
                    type: integer
                    example: '0'
                sumDiscountAmountAggregation:
                    type: integer
                    example: '0'
                unitPriceToPayAggregation:
                    type: integer
                    example: '299'
                sumPriceToPayAggregation:
                    type: integer
                    example: '299'
        RestCartItemCalculations:
            properties:
                unitPrice:
                    type: integer
                    example: '699'
                    description: 'Gross or net unit price based on the selected cart price mode.'
                sumPrice:
                    type: integer
                    example: '2097'
                    description: 'Sum gross or sum net unit price based on the selected cart price mode.'
                taxRate:
                    type: integer
                    example: '200'
                    description: 'Tax rate of the abstract product for selected country.'
                unitNetPrice:
                    type: integer
                    example: '699'
                    description: 'Concrete product price for the net price mode.'
                sumNetPrice:
                    type: integer
                    example: '2097'
                    description: 'Concrete product sum price for the net price mode based on item quantity.'
                unitGrossPrice:
                    type: integer
                    example: '699'
                    description: 'Concrete product price for the gross price mode.'
                sumGrossPrice:
                    type: integer
                    example: '2097'
                    description: 'Concrete product sum price for the gross price mode based on item quantity.'
                unitTaxAmountFullAggregation:
                    type: integer
                    example: '1398'
                    description: 'Unit tax amount based on tax rate, price mode, product options, and unit price.'
                sumTaxAmountFullAggregation:
                    type: integer
                    example: '4194'
                    description: 'Sum tax amount based on tax rate, price mode, product options,and unit price.'
                sumSubtotalAggregation:
                    type: integer
                    example: '2097'
                    description: 'Sum of sumPrice and sumProductOptionPriceAggregation.'
                unitSubtotalAggregation:
                    type: integer
                    example: '699'
                    description: 'Sum of unitPrice and unitProductOptionPriceAggregation.'
                unitProductOptionPriceAggregation:
                    type: integer
                    example: '250'
                    description: 'Aggregated product options price selected for the item.'
                sumProductOptionPriceAggregation:
                    type: integer
                    example: '750'
                    description: 'Aggregated product options price selected for the item multiplied by product quantity.'
                unitDiscountAmountAggregation:
                    type: integer
                    example: '75'
                    description: 'Unit discount amount calculated based on unit price and item discounts.'
                sumDiscountAmountAggregation:
                    type: integer
                    example: '225'
                    description: 'Sum discount amount calculated based on sum price and item discounts.'
                unitDiscountAmountFullAggregation:
                    type: integer
                    example: '100'
                    description: 'Sum of unitDiscountAmountAggregation and product options discount for one item.'
                sumDiscountAmountFullAggregation:
                    type: integer
                    example: '300'
                    description: 'Sum of sumDiscountAmountAggregation and product options discount.'
                unitPriceToPayAggregation:
                    type: integer
                    example: '2097'
                    description: 'Unit price to pay based on unit subtotal aggregation, taxes, discount, and additional expenses.'
                sumPriceToPayAggregation:
                    type: integer
                    example: '6291'
                    description: 'Sum price to pay based on sum subtotal aggregation, taxes, discount, and additional expenses.'
                unitBottleDepositPriceAggregation:
                    type: integer
                    example: '12'
                    description: 'Bottle deposit price for single item.'
                sumBottleDepositPriceAggregation:
                    type: integer
                    example: '36'
                    description: 'Bottle deposit sum calculated based on item quantity.'
        RestCartItemsProductOptionTransfer:
            properties: {  }
        RestCartItemsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartItemsRequestData'
        RestCartItemsRequestAttributes:
            properties:
                sku:
                    type: string
                    example: '4099100172416'
                    description: 'Product concrete SKU.'
                quantity:
                    type: integer
                    example: '1'
                    description: 'Product quantity.'
                idPromotionalItem:
                    type: string
                productOfferReference:
                    type: string
                    example: 4099100172416_474-002
                    description: 'Unique merchant offer reference for product.'
                merchantReference:
                    type: string
                    example: '474_02'
                    description: 'Merchant reference the item belongs to.'
                salesUnit:
                    $ref: '#/components/schemas/RestCartItemsSalesUnitRequestAttributes'
                productOptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartItemsProductOptionTransfer'
                isReplaceable:
                    type: boolean
                    default: 'true'
                    description: 'Determines if the item is replaceable or not.'
                    enum:
                        - true
                        - false
            required:
                - sku
                - quantity
        RestCartItemsRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - fixtures
                attributes:
                    $ref: '#/components/schemas/RestCartItemsRequestAttributes'
        RestCartItemsSalesUnitAttributes:
            properties:
                id:
                    type: integer
                amount:
                    type: number
        RestCartItemsSalesUnitRequestAttributes:
            properties:
                id:
                    type: integer
                amount:
                    type: number
        RestCartsAttributes:
            properties:
                priceMode:
                    type: string
                    example: NET_MODE
                    description: 'The cart price mode.'
                    enum:
                        - NET_MODE
                        - GROSS_MODE
                currency:
                    type: string
                    example: USD
                    description: 'One of the currency codes enabled for the current shop.'
                store:
                    type: string
                    example: US
                    description: 'The cart store.'
                discounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartsDiscounts'
                totals:
                    $ref: '#/components/schemas/RestCartsTotals'
                expenses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartExpenseAttributes'
                ageRestriction:
                    type: integer
                    example: '21'
                    description: 'Determines the minimum customer age to buy the product.'
                totalUniqueItems:
                    type: integer
                    example: '3'
                    description: 'Count number of unique items'
                totalQuantityOfItems:
                    type: integer
                    example: '5'
                    description: 'Count number of all items'
                merchantReference:
                    type: string
                    example: '474_02'
                    description: 'Merchant reference the cart belongs to.'
                merchantSelections:
                    $ref: '#/components/schemas/RestMerchantSelections'
                merchantTimeslot:
                    $ref: '#/components/schemas/RestMerchantTimeslotsAttributes'
                hardMinimumThreshold:
                    type: integer
                    example: '2000'
                    description: 'Minimum threshold to place order.'
                hardMinimumThresholdDelta:
                    type: integer
                    example: '500'
                    description: 'Delta between cart subtotal and minimum threshold.'
                taxCollection:
                    $ref: '#/components/schemas/RestTaxDetailCollection'
                tipAmount:
                    type: integer
                    example: '500'
                    description: 'Tip total from the cart totals.'
        RestCartsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCartsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCartsIncluded'
        RestCartsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - carts
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCartsRelationships'
        RestCartsDiscounts:
            properties:
                displayName:
                    type: string
                    example: '5% discount on all white products'
                    description: 'The discount name.'
                amount:
                    type: integer
                    example: '10'
                    description: 'Discount amount.'
                code:
                    type: string
                    example: discount_3
                    description: 'Discount voucher code.'
        RestCartsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestDiscountsResponseData'
                    -
                        $ref: '#/components/schemas/RestItemsResponseData'
                    -
                        $ref: '#/components/schemas/RestPromotionalItemsResponseData'
                    -
                        $ref: '#/components/schemas/RestGiftCardsResponseData'
                    -
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
            type: array
        RestCartsRelationships:
            properties:
                cart-rules:
                    $ref: '#/components/schemas/RestRelationshipsData'
                items:
                    $ref: '#/components/schemas/RestRelationshipsData'
                promotional-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
                gift-cards:
                    $ref: '#/components/schemas/RestRelationshipsData'
                bundle-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
                merchants:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCartsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartsRequestData'
        RestCartsRequestAttributes:
            properties:
                priceMode:
                    type: string
                    example: NET_MODE
                    description: 'The cart price mode.'
                    enum:
                        - NET_MODE
                        - GROSS_MODE
                currency:
                    type: string
                    example: USD
                    description: 'One of the currency codes enabled for the current shop.'
                store:
                    type: string
                    example: US
                    description: 'The cart store.'
                merchantReference:
                    type: string
                    example: '474_02'
                    description: 'Merchant reference the cart belongs to.'
                merchantSelections:
                    $ref: '#/components/schemas/RestMerchantSelectionsTransfer'
                merchantTimeslot:
                    $ref: '#/components/schemas/RestMerchantTimeslotsRequestAttributes'
                tipAmount:
                    type: integer
                    example: '500'
                    description: 'Tip total from the cart totals.'
            required:
                - priceMode
                - currency
                - store
        RestCartsRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - carts
                attributes:
                    $ref: '#/components/schemas/RestCartsRequestAttributes'
        RestCartsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCartsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCartsIncluded'
        RestCartsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCartsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCartsRelationships'
        RestCartsTotals:
            properties:
                expenseTotal:
                    type: integer
                    example: '500'
                    description: 'Total sum of all expenses, for example, delivery.'
                discountTotal:
                    type: integer
                    example: '250'
                    description: 'Total sum of all applied product discounts.'
                taxTotal:
                    type: integer
                    example: '1000'
                    description: 'Total sum of all taxes.'
                subtotal:
                    type: integer
                    example: '3294'
                    description: 'Sum of sumSubtotalAggregation of all items.'
                grandTotal:
                    type: integer
                    example: '3294'
                    description: 'Grand total of all items and expanses.'
                priceToPay:
                    type: integer
                    example: '3623'
                    description: 'Total price user should pay, includes all items and all possible additional expenses.'
                bottleDepositTotal:
                    type: integer
                    example: '36'
                    description: 'Sum of all bottle deposits of all items.'
                tipTotal:
                    type: integer
                    example: '500'
                    description: 'Tip amount calculated based on cart subtotal and tip amount percentage for delivery service.'
        RestCatalogSearchMerchantProductOfferAttributes:
            properties:
                name:
                    type: string
                    example: 'Broccoli Crowns'
                    description: 'Product offer name'
                productOfferReference:
                    type: string
                    example: 4099100172416_474-002
                    description: 'Unique merchant offer reference for product.'
                merchantReference:
                    type: string
                    example: 474-002
                    description: 'Merchant reference the item belongs to.'
                productAbstractSku:
                    type: string
                    example: 700102US
                    description: 'Abstract product sku.'
                productConcreteSku:
                    type: string
                    example: '700102'
                    description: 'Concrete product sku.'
                prices:
                    type: array
                    items: {  }
                images:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchMerchantProductOfferImage'
                url:
                    type: string
                    example: /en/broccoli-crowns-700102/700102US
                    description: 'Product page url.'
                urlSlugText:
                    type: string
                    example: broccoli-crowns-700102
                    description: 'Slug text url.'
        RestCatalogSearchMerchantProductOfferImage:
            properties:
                externalUrlLarge:
                    type: string
                    example: 'https://domain.aldi.cx/image/scaleWidth/{width}/933d7712-2a27-4d38-8238-1afb4f1ab809'
                    description: 'Large image external url.'
                externalUrlSmall:
                    type: string
                    example: 'https://domain.aldi.cx/image/scaleWidth/{width}/f9961c06-295f-45de-b065-58d2d48f3898'
                    description: 'Small image external url.'
                maxWidth:
                    type: integer
                    example: '2023'
                    description: 'Max image width.'
                maxHeight:
                    type: integer
                    example: '2500'
                    description: 'Max image height.'
                ratio:
                    type: number
                    example: '0.80900000000000005'
                    description: 'Image aspect ratio.'
                assetType:
                    type: string
                    example: FR01
                    description: 'Type of this asset.'
                sortOrder:
                    type: string
                    example: '1'
                    description: 'Image sort order.'
        RestCatalogSearchProductOfferPaginationConfig:
            properties:
                parameterName:
                    type: string
                    example: page
                    description: 'Parameter name from pagination config.'
                itemsPerPageParameterName:
                    type: string
                    example: ipp
                    description: 'Items per page parameter name from pagination config.'
                defaultItemsPerPage:
                    type: integer
                    example: '16'
                    description: 'Default items per page quantity from pagination config.'
                validItemsPerPageOptions:
                    type: array
                    items: {  }
        RestCatalogSearchProductOffersAttributes:
            properties:
                sort:
                    $ref: '#/components/schemas/RestProductOfferSort'
                spellingSuggestion:
                    type: string
                    example: broccoli
                    description: 'Spelling suggestion'
                pagination:
                    $ref: '#/components/schemas/RestProductOfferPagination'
                valueFacets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestFacetSearchResult'
                rangeFacets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestRangeSearchResult'
                categoryTreeFilter:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodeSearchResultAttributes'
                catalogSearchProductOfferResults:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchMerchantProductOfferAttributes'
                searchKeywordRedirectResults:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestSearchKeywordRedirectAttributes'
        RestCatalogSearchProductOffersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchProductOffersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCatalogSearchProductOffersIncluded'
        RestCatalogSearchProductOffersCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - catalog-search-product-offers
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCatalogSearchProductOffersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCatalogSearchProductOffersRelationships'
        RestCatalogSearchProductOffersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductOffersCollectionResponseData'
            type: array
        RestCatalogSearchProductOffersRelationships:
            properties:
                product-offers:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCatalogSearchSuggestionsProductOffersAttributes:
            properties:
                searchKeywordRedirectResults:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestSearchKeywordRedirectAttributes'
                catalogSearchSuggestionsProductOfferResults:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchMerchantProductOfferAttributes'
                categoryCollection:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionsProductOffersCategoriesAttributes'
                completion:
                    type: array
                    items:
                        type: string
        RestCatalogSearchSuggestionsProductOffersCategoriesAttributes:
            properties:
                urlSlugText:
                    type: string
                    example: 100-vegetable-juice-051000008039
                    description: 'Slug text url.'
                name:
                    type: string
                    example: '100% Vegetable Juice'
                    description: 'Suggestion name.'
        RestCatalogSearchSuggestionsProductOffersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCatalogSearchSuggestionsProductOffersCollectionResponseData'
        RestCatalogSearchSuggestionsProductOffersCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - catalog-search-suggestions-product-offers
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCatalogSearchSuggestionsProductOffersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCategoryNodeSearchResultAttributes:
            properties:
                nodeId:
                    type: integer
                    example: '124'
                    description: 'Category node ID.'
                name:
                    type: string
                    example: packaging-test
                    description: 'Category node name.'
                docCount:
                    type: integer
                    example: '0'
                    description: 'Count of the docs.'
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodeSearchResultAttributes'
        RestCategoryNodesAttributes:
            properties:
                nodeId:
                    type: integer
                name:
                    type: string
                metaTitle:
                    type: string
                metaKeywords:
                    type: string
                metaDescription:
                    type: string
                isActive:
                    type: boolean
                    enum:
                        - true
                        - false
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodesAttributes'
                parents:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryNodesAttributes'
                order:
                    type: integer
                url:
                    type: string
                urlSlugText:
                    type: string
        RestCategoryNodesResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCategoryNodesResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCategoryNodesResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCategoryNodesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCategoryTreesAttributes:
            properties:
                nodeId:
                    type: integer
                order:
                    type: integer
                name:
                    type: string
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryTreesAttributes'
                url:
                    type: string
        RestCategoryTreesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCategoryTreesCollectionResponseData'
        RestCategoryTreesCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - category-trees
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCategoryTreesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCheckoutDataResponseAttributes:
            properties:
                addresses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestAddress'
                paymentProviders:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentProvider'
                shipmentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentMethod'
                selectedShipmentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentMethod'
                selectedPaymentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentMethod'
                cartNote:
                    type: string
                    example: 'Cart Note'
                ageRestriction:
                    type: integer
                ageValid:
                    type: boolean
                    enum:
                        - true
                        - false
                customer:
                    $ref: '#/components/schemas/RestCustomerCheckoutDataResponseAttributes'
                firstDataCreditCardParameters:
                    $ref: '#/components/schemas/FirstDataCreditCardParameters'
                firstDataPaymentProcessingLink:
                    type: string
                    example: 'https://test.ipg-online.com/connect/gateway/processing'
                taxCollection:
                    $ref: '#/components/schemas/RestTaxDetailCollection'
        RestCheckoutDataResponseIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestShipmentMethodsResponseData'
                    -
                        $ref: '#/components/schemas/RestCustomerPaymentMethodsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestCartsCollectionResponseData'
            type: array
        RestCheckoutDataResponseRelationships:
            properties:
                shipment-methods:
                    $ref: '#/components/schemas/RestRelationshipsData'
                payment-methods:
                    $ref: '#/components/schemas/RestRelationshipsData'
                carts:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCheckoutDataResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutDataResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCheckoutDataResponseIncluded'
        RestCheckoutDataResponseResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCheckoutDataResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCheckoutDataResponseRelationships'
        RestCheckoutRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutRequestData'
        RestCheckoutRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - checkout
                attributes:
                    $ref: '#/components/schemas/RestCheckoutRequestRequestAttributes'
        RestCheckoutRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutRequestRequestData'
        RestCheckoutRequestRequestAttributes:
            properties:
                customer:
                    $ref: '#/components/schemas/RestCustomerTransfer'
                idCart:
                    type: string
                    format: uuid
                billingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                shippingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                payments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentTransfer'
                shipment:
                    $ref: '#/components/schemas/RestShipmentTransfer'
                shipments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestShipmentsTransfer'
                cartNote:
                    type: string
                    example: 'Cart Note'
                    maxLength: 255
                firstDataTransactionData:
                    $ref: '#/components/schemas/RestFirstDataTransactionRequestAttributes'
            required:
                - idCart
        RestCheckoutRequestRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - checkout-testing
                attributes:
                    $ref: '#/components/schemas/RestCheckoutRequestRequestAttributes'
        RestCheckoutResponseAttributes:
            properties:
                orderReference:
                    type: string
                    example: US--4
                redirectUrl:
                    type: string
                isExternalRedirect:
                    type: boolean
                    enum:
                        - true
                        - false
        RestCheckoutResponseIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestOrdersCollectionResponseData'
            type: array
        RestCheckoutResponseRelationships:
            properties:
                orders:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCheckoutResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCheckoutResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCheckoutResponseIncluded'
        RestCheckoutResponseResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestCheckoutResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCheckoutResponseRelationships'
        RestCodeAuthorizeAttributes:
            properties: {  }
        RestCodeAuthorizeRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCodeAuthorizeRequestData'
        RestCodeAuthorizeRequestAttributes:
            properties: {  }
        RestCodeAuthorizeRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - code-authorize
                attributes:
                    $ref: '#/components/schemas/RestCodeAuthorizeRequestAttributes'
        RestCodeAuthorizeResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCodeAuthorizeResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCodeAuthorizeResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - code-authorize
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCodeAuthorizeAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestConcreteProductAvailabilityAttributes:
            properties:
                isNeverOutOfStock:
                    type: boolean
                    enum:
                        - true
                        - false
                quantity:
                    type: number
                availability:
                    type: boolean
                    enum:
                        - true
                        - false
        RestConcreteProductAvailabilityCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestConcreteProductAvailabilityCollectionResponseData'
        RestConcreteProductAvailabilityCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - concrete-product-availabilities
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestConcreteProductAvailabilityAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCurrency:
            properties:
                code:
                    type: string
                name:
                    type: string
                symbol:
                    type: string
        RestCustomerCheckoutDataResponseAttributes:
            properties:
                dateOfBirth:
                    type: string
                    example: '1995-01-01'
                phone:
                    type: string
                    example: 495-123-45-67
        RestCustomerFixturesAttributes:
            properties:
                itemsQuantity:
                    type: integer
        RestCustomerFixturesRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerFixturesRequestData'
        RestCustomerFixturesRequestAttributes:
            properties: {  }
        RestCustomerFixturesRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - customer-fixture
                attributes:
                    $ref: '#/components/schemas/RestCustomerFixturesRequestAttributes'
        RestCustomerFixturesResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerFixturesResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerFixturesResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerFixturesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerForgottenPasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerForgottenPasswordRequestData'
        RestCustomerForgottenPasswordRequestAttributes:
            properties:
                email:
                    type: string
            required:
                - email
        RestCustomerForgottenPasswordRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - customer-forgotten-password
                attributes:
                    $ref: '#/components/schemas/RestCustomerForgottenPasswordRequestAttributes'
        RestCustomerPasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerPasswordRequestData'
        RestCustomerPasswordRequestAttributes:
            properties:
                password:
                    type: string
                newPassword:
                    type: string
                confirmPassword:
                    type: string
            required:
                - password
                - newPassword
                - confirmPassword
        RestCustomerPasswordRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - customer-password
                attributes:
                    $ref: '#/components/schemas/RestCustomerPasswordRequestAttributes'
        RestCustomerPaymentMethodDetails:
            properties:
                ccBrand:
                    type: string
                ccHolder:
                    type: string
                ccMask:
                    type: string
                ccExpiryMonth:
                    type: string
                ccExpiryYear:
                    type: string
        RestCustomerPaymentMethodsAttributes:
            properties:
                paymentMethodName:
                    type: string
                paymentMethodProvider:
                    type: string
                paymentMethodReference:
                    type: string
                details:
                    $ref: '#/components/schemas/RestCustomerPaymentMethodDetails'
                isDefault:
                    type: boolean
                    enum:
                        - true
                        - false
        RestCustomerPaymentMethodsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCustomerPaymentMethodsCollectionResponseData'
        RestCustomerPaymentMethodsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - payment-methods
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerPaymentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerPaymentMethodsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerPaymentMethodsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerPaymentMethodsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomerPaymentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestCustomerRestorePasswordRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomerRestorePasswordRequestData'
        RestCustomerRestorePasswordRequestAttributes:
            properties:
                restorePasswordKey:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
            required:
                - restorePasswordKey
                - password
                - confirmPassword
        RestCustomerRestorePasswordRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - customer-restore-password
                attributes:
                    $ref: '#/components/schemas/RestCustomerRestorePasswordRequestAttributes'
        RestCustomerTransfer:
            properties:
                email:
                    type: string
                    format: email
                    example: sonia@spryker.com
                salutation:
                    type: string
                    example: Mrs
                    enum:
                        - Mr
                        - Mrs
                        - Dr
                        - Ms
                firstName:
                    type: string
                    example: Sonia
                    maxLength: 100
                lastName:
                    type: string
                    example: Wagner
                    maxLength: 100
                dateOfBirth:
                    type: string
                    pattern: '/([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))/'
                    example: '1957-10-23'
                phone:
                    type: string
                    example: '1 800-123-0000'
                    maxLength: 255
        RestCustomersAttributes:
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                gender:
                    type: string
                dateOfBirth:
                    type: string
                salutation:
                    type: string
                createdAt:
                    type: string
                updatedAt:
                    type: string
                email:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
                acceptedTerms:
                    type: boolean
                    enum:
                        - true
                        - false
                merchantReference:
                    type: string
        RestCustomersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCustomersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestCustomersIncluded'
        RestCustomersCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - customers
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCustomersRelationships'
        RestCustomersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestSalesforceAddressCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
            type: array
        RestCustomersRelationships:
            properties:
                addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
                merchants:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestCustomersRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomersRequestData'
        RestCustomersRequestAttributes:
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                gender:
                    type: string
                salutation:
                    type: string
                email:
                    type: string
                password:
                    type: string
                confirmPassword:
                    type: string
                acceptedTerms:
                    type: boolean
                    enum:
                        - true
                        - false
            required:
                - firstName
                - lastName
                - gender
                - salutation
                - email
                - password
                - confirmPassword
                - acceptedTerms
        RestCustomersRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - customers
                attributes:
                    $ref: '#/components/schemas/RestCustomersRequestAttributes'
        RestCustomersResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestCustomersResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestCustomersIncluded'
        RestCustomersResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestCustomersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestCustomersRelationships'
        RestDateSchedule:
            properties:
                date:
                    type: string
                    example: '2021-11-28'
                timeFrom:
                    type: string
                    example: '10:00:00+00:00'
                timeTo:
                    type: string
                    example: '17:00:00+00:00'
                note:
                    type: string
                    example: 'Sunday Opening'
        RestDiscountsAttributes:
            properties:
                amount:
                    type: integer
                code:
                    type: string
                discountType:
                    type: string
                displayName:
                    type: string
                isExclusive:
                    type: boolean
                    enum:
                        - true
                        - false
                expirationDateTime:
                    type: string
                discountPromotionAbstractSku:
                    type: string
                discountPromotionQuantity:
                    type: integer
        RestDiscountsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - cart-rules
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestDiscountsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestErrorMessage:
            properties:
                code:
                    type: string
                    example: '1234'
                    description: 'Error code, for example: 4101.'
                status:
                    type: integer
                    example: '422'
                    description: 'Status or error.'
                detail:
                    type: string
                    example: 'Error message text.'
                    description: 'Error message text.'
        RestFacetConfig:
            properties:
                parameterName:
                    type: string
                    example: price
                    description: 'Facet name from config.'
                isMultiValued:
                    type: boolean
                    example: 'false'
                    description: 'Whether it&#039;s multivalued or not.'
                    enum:
                        - 'true'
                        - 'false'
        RestFacetSearchResult:
            properties:
                name:
                    type: string
                    example: brand_name
                    description: 'Facet name.'
                localizedName:
                    type: string
                    example: 'Brand Name'
                    description: 'Facet localized name.'
                docCount:
                    type: integer
                    example: '0'
                    description: 'Count of the docs.'
                values:
                    type: array
                    items: {  }
                activeValue:
                    type: string
                    example: Millville
                    description: 'Active value.'
                config:
                    $ref: '#/components/schemas/RestFacetConfig'
        RestFirstDataNotificationsAttributes:
            properties:
                ipgTransactionId:
                    type: string
                oid:
                    type: string
                txnDateTime:
                    type: string
                status:
                    type: string
                approvalCode:
                    type: string
                schemeTransactionId:
                    type: string
                chargeTotal:
                    type: string
                hosteddataid:
                    type: string
                responseHash:
                    type: string
                cardNumber:
                    type: string
                expYear:
                    type: string
                expMonth:
                    type: string
                ccBrand:
                    type: string
                bname:
                    type: string
                currency:
                    type: integer
        RestFirstDataNotificationsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestFirstDataNotificationsRequestData'
        RestFirstDataNotificationsRequestAttributes:
            properties:
                ipgTransactionId:
                    type: string
                oid:
                    type: string
                txnDateTime:
                    type: string
                status:
                    type: string
                approvalCode:
                    type: string
                schemeTransactionId:
                    type: string
                chargeTotal:
                    type: string
                hosteddataid:
                    type: string
                responseHash:
                    type: string
                cardNumber:
                    type: string
                expYear:
                    type: string
                expMonth:
                    type: string
                ccBrand:
                    type: string
                bname:
                    type: string
                currency:
                    type: integer
        RestFirstDataNotificationsRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - first-data-notifications
                attributes:
                    $ref: '#/components/schemas/RestFirstDataNotificationsRequestAttributes'
        RestFirstDataNotificationsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestFirstDataNotificationsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestFirstDataNotificationsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - first-data-notifications
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestFirstDataNotificationsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestFirstDataTransactionRequestAttributes:
            properties:
                ipgTransactionId:
                    type: string
                    example: '84562202742'
                oid:
                    type: string
                    example: 9a78477eeb31fa3f9dbaf5faf1ac41cf
                txnDateTime:
                    type: string
                    example: '2021:07:13-13:43:51'
                status:
                    type: string
                    example: APPROVED
                approvalCode:
                    type: string
                    example: 'Y:OK0998:4566903903:YYYX:872625'
                schemeTransactionId:
                    type: string
                    example: '011194868878806'
                chargeTotal:
                    type: string
                    example: '48.68'
                hosteddataid:
                    type: string
                    example: 7DFBBAB8E-C6C1-480D-B039-4F39CC08E203
                responseHash:
                    type: string
                    example: Ez8vsQE8CMUOltDJ6JanJxVaQ3jB27tbaAekONfQtfI=
                cardNumber:
                    type: string
                    example: (VISA)+...+1111
                expYear:
                    type: string
                    example: '2026'
                expMonth:
                    type: string
                    example: '02'
                ccBrand:
                    type: string
                    example: VISA
                bname:
                    type: string
                currency:
                    type: string
                    example: '840'
        RestGiftCardsAttributes:
            properties:
                code:
                    type: string
                name:
                    type: string
                value:
                    type: integer
                currencyIsoCode:
                    type: string
                actualValue:
                    type: integer
                    description: 'The rest amount assigned to a gift card'
                isActive:
                    type: boolean
                    enum:
                        - true
                        - false
        RestGiftCardsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - gift-cards
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestGiftCardsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestHealthCheckResponseAttributes:
            properties:
                status:
                    type: string
                statusCode:
                    type: integer
                message:
                    type: string
                healthCheckServiceResponses:
                    type: array
                    items:
                        $ref: '#/components/schemas/HealthCheckServiceResponse'
        RestHealthCheckResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestHealthCheckResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestHealthCheckResponseResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestHealthCheckResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestImagesAttributes:
            properties:
                externalUrlLarge:
                    type: string
                externalUrlSmall:
                    type: string
                maxWidth:
                    type: integer
                    example: '1000'
                maxHeight:
                    type: integer
                    example: '500'
                ratio:
                    type: number
                    example: '1.5'
                assetType:
                    type: string
                    example: FR01
                sortOrder:
                    type: integer
                    example: '1'
        RestImportsAttributes:
            properties: {  }
        RestImportsRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestImportsRequestData'
        RestImportsRequestAttributes:
            properties: {  }
        RestImportsRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - import-merchant_pos
                attributes:
                    $ref: '#/components/schemas/RestImportsRequestAttributes'
        RestImportsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestImportsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestImportsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - import-merchant_pos
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestImportsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestInstacartCallbacksAttributes:
            properties: {  }
        RestInstacartCallbacksRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestInstacartCallbacksRequestData'
        RestInstacartCallbacksRequestAttributes:
            properties: {  }
        RestInstacartCallbacksRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - instacart-callbacks
                attributes:
                    $ref: '#/components/schemas/RestInstacartCallbacksRequestAttributes'
        RestInstacartCallbacksResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestInstacartCallbacksResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestInstacartCallbacksResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestInstacartCallbacksAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestItemProductOptions:
            properties:
                optionGroupName:
                    type: string
                    example: Insurance
                    description: 'Product option group name.'
                sku:
                    type: string
                    example: OP_insurance
                    description: 'Product option SKU.'
                optionName:
                    type: string
                    example: 'Two (2) year insurance coverage'
                    description: 'Product option name.'
                price:
                    type: integer
                    example: '50'
                    description: 'Product option price.'
        RestItemsAttributes:
            properties:
                sku:
                    type: string
                    example: '4099100172416'
                    description: 'Product concrete SKU.'
                quantity:
                    type: integer
                    example: '1'
                    description: 'Product quantity.'
                groupKey:
                    type: string
                    example: 4099100172416_4099100172416_474-002
                    description: 'Group key generated for the item to separate it from the same items but with different selected settings.'
                abstractSku:
                    type: string
                    example: 4099100172416US
                    description: 'Product abstract SKU.'
                amount:
                    type: integer
                calculations:
                    $ref: '#/components/schemas/RestCartItemCalculations'
                productOfferReference:
                    type: string
                    example: 4099100172416_474-002
                    description: 'Unique merchant offer reference for product.'
                merchantReference:
                    type: string
                    example: '474_02'
                    description: 'Merchant reference the item belongs to.'
                salesUnit:
                    $ref: '#/components/schemas/RestCartItemsSalesUnitAttributes'
                selectedProductOptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestItemProductOptions'
                concreteAttributes:
                    type: array
                    items: {  }
                randomWeightType:
                    type: string
                    example: '1'
                    description: 'Product random weight type.'
                    enum:
                        - '0'
                        - '1'
                        - '2'
                        - '3'
                isReplaceable:
                    type: boolean
                    default: 'true'
                    description: 'Determines if the item is replaceable or not.'
                    enum:
                        - true
                        - false
        RestItemsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - bundle-items
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestLegalInformation:
            properties:
                terms:
                    type: string
                    example: 'Legal terms information text.'
                cancellationPolicy:
                    type: string
                    example: 'Legal cancellation policy text.'
                imprint:
                    type: string
                    example: 'Legal imprint text.'
                dataPrivacy:
                    type: string
                    example: 'Legal data privacy text.'
        RestLinks:
            properties:
                self:
                    type: string
        RestMerchantAddress:
            properties:
                countryName:
                    type: string
                    example: 'United States'
                address1:
                    type: string
                    example: '203 Fifth Ave'
                    maxLength: 255
                address2:
                    type: string
                    example: '17th floor'
                    maxLength: 255
                address3:
                    type: string
                    example: 'Office 1716'
                    maxLength: 255
                city:
                    type: string
                    example: 'New York'
                    maxLength: 255
                zipCode:
                    type: string
                    pattern: '/\d{5}([ \-]\d{4})?/'
                    example: '10013'
                iso2Code:
                    type: string
                    format: iso2
                    enum:
                        - US
                countryIsoCode:
                    type: string
                    format: iso2
                    example: US
                    description: 'Country ISO code.'
                    enum:
                        - US
                latitude:
                    type: string
                    example: '28.55215'
                    maxLength: 255
                longitude:
                    type: string
                    example: '-81.592118'
                    maxLength: 255
                regionName:
                    type: string
                    example: Florida
                    maxLength: 255
                regionIsoCode:
                    type: string
                    example: FL
                    maxLength: 70
        RestMerchantAddressesAttributes:
            properties:
                addresses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantAddress'
        RestMerchantAddressesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantAddressesCollectionResponseData'
        RestMerchantAddressesCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - merchant-addresses
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantAddressesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestMerchantCategoryTrees:
            properties:
                nodeId:
                    type: integer
                    format: integer
                    example: '23'
                    description: 'Merchant category ID.'
                order:
                    type: integer
                    format: integer
                    example: '30'
                    description: 'Order ID.'
                name:
                    type: string
                    example: Snacks
                    description: 'Merchant category name.'
                image:
                    type: string
                    example: 'https://dm.cms.aldi.cx/is/image/dev1amer/product/jpg/scaleWidth/{width}/74d28097-778e-410b-8736-d2318f6bc368'
                    description: 'Image url.'
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantCategoryTrees'
                urlSlugText:
                    type: string
                    example: aldi-us/snacks
                    description: 'Category slug.'
        RestMerchantCategoryTreesAttributes:
            properties:
                categoryNodesStorage:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantCategoryTrees'
        RestMerchantCategoryTreesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantCategoryTreesCollectionResponseData'
        RestMerchantCategoryTreesCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - merchant-category-trees
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantCategoryTreesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestMerchantFilterAddress:
            properties:
                address1:
                    type: string
                    example: 'City, street, house number.'
                    description: 'Delivery address.'
                zipCode:
                    type: string
                    example: '32836'
                    description: 'Zip code for delivery address or for pickup service.'
        RestMerchantFilterAddressTransfer:
            properties:
                address1:
                    type: string
                    example: 'City, street, house number.'
                    description: 'Delivery address.'
                zipCode:
                    type: string
                    example: '32836'
                    description: 'Zip code for delivery address or for pickup service.'
        RestMerchantOpeningHoursAttributes:
            properties:
                weekdaySchedule:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestWeekdaySchedule'
                dateSchedule:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestDateSchedule'
        RestMerchantOpeningHoursCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantOpeningHoursCollectionResponseData'
        RestMerchantOpeningHoursCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - merchant-opening-hours
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantOpeningHoursAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestMerchantSearchResponseAttributes:
            properties:
                address:
                    $ref: '#/components/schemas/RestMerchantAddress'
                merchantName:
                    type: string
                    example: '1234 Some Merchant Name'
                merchantUrl:
                    type: string
                    example: /en/merchant/474-161
                contactPersonRole:
                    type: string
                    example: 'Merchant Role'
                contactPersonTitle:
                    type: string
                    enum:
                        - Mr
                        - Mrs
                        - Dr
                        - Ms
                contactPersonFirstName:
                    type: string
                    example: Sonia
                contactPersonLastName:
                    type: string
                    example: Wagner
                contactPersonPhone:
                    type: string
                    example: 800-123-0000
                logoUrl:
                    type: string
                    example: 'http://d2s0ynfc62ej12.cloudfront.net/image/07de3f84-842b-4015-927c-f4dca3a83ab7.png'
                publicEmail:
                    type: string
                    format: email
                    example: sonia@spryker.com
                publicPhone:
                    type: string
                    example: 800-123-0000
                description:
                    type: string
                    example: 'Some merchant profile text description.'
                bannerUrl:
                    type: string
                    example: 'http://d2s0ynfc62ej12.cloudfront.net/image/dff89717-9a61-4238-876e-a53f2cc18923.png'
                deliveryTime:
                    type: string
                    example: '1-3 days / Tage'
                faxNumber:
                    type: string
                    example: 800-123-0000
                legalInformation:
                    $ref: '#/components/schemas/RestLegalInformation'
        RestMerchantSearchResponseCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantSearchResponseCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestMerchantSearchResponseIncluded'
        RestMerchantSearchResponseCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - merchant-search
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantSearchResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestMerchantSearchResponseRelationships'
        RestMerchantSearchResponseIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestMerchantOpeningHoursCollectionResponseData'
            type: array
        RestMerchantSearchResponseRelationships:
            properties:
                merchant-opening-hours:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestMerchantSelections:
            properties:
                serviceType:
                    type: string
                    example: pickup
                    description: 'Selected merchant service type.'
                    enum:
                        - pickup
                        - delivery
                merchantFilterAddress:
                    $ref: '#/components/schemas/RestMerchantFilterAddress'
        RestMerchantSelectionsTransfer:
            properties:
                serviceType:
                    type: string
                    example: pickup
                    description: 'Selected merchant service type.'
                    enum:
                        - pickup
                        - delivery
                merchantFilterAddress:
                    $ref: '#/components/schemas/RestMerchantFilterAddressTransfer'
        RestMerchantTimeslotAvailability:
            properties:
                isAvailable:
                    type: boolean
                    example: 'false'
                    description: 'Represents if a timeslot is available or not.'
                    enum:
                        - true
                        - false
                reasons:
                    type: array
                    items:
                        type: string
        RestMerchantTimeslotReservationsAttributes:
            properties:
                expirationDate:
                    type: string
                    format: datetime
                    example: '2021-08-12T10:42:28+00:00'
                    description: 'Represents time when timeslot reservation expires.'
                merchantTimeslotReservationId:
                    type: integer
                    example: '370854035'
                    description: 'Timeslot reservation unique identifier.'
        RestMerchantTimeslotReservationsRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestMerchantTimeslotReservationsRequestRequestData'
        RestMerchantTimeslotReservationsRequestRequestAttributes:
            properties: {  }
        RestMerchantTimeslotReservationsRequestRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - merchant-timeslot-reservations
                attributes:
                    $ref: '#/components/schemas/RestMerchantTimeslotReservationsRequestRequestAttributes'
        RestMerchantTimeslotsAttributes:
            properties:
                merchantTimeslotId:
                    type: integer
                    example: '493803018'
                    description: 'Timeslot unique identifier.'
                date:
                    type: string
                    format: date
                    example: '2021-08-12'
                    description: 'Timeslot date.'
                startTime:
                    type: string
                    format: datetime
                    example: '2021-08-12T14:00:00+00:00'
                    description: 'Timeslot start time.'
                endTime:
                    type: string
                    format: datetime
                    example: '2021-08-12T15:00:00+00:00'
                    description: 'Timeslot end time.'
                immediateHour:
                    type: string
                    example: '2'
                    description: 'Represents delay in hours between order placement and delivery/pickup availability in case a customer needs ASAP service.'
                asap:
                    type: boolean
                    default: 'false'
                    example: 'false'
                    description: 'Determines if the timeslot has a concrete start/end time window or it is for ASAP service.'
                    enum:
                        - true
                        - false
                availability:
                    $ref: '#/components/schemas/RestMerchantTimeslotAvailability'
                merchantTimeslotReservation:
                    $ref: '#/components/schemas/RestMerchantTimeslotReservationsAttributes'
        RestMerchantTimeslotsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantTimeslotsCollectionResponseData'
        RestMerchantTimeslotsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - preview-delivery-timeslots
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantTimeslotsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestMerchantTimeslotsRequestAttributes:
            properties:
                merchantTimeslotId:
                    type: integer
                    example: '493803018'
                    description: 'Timeslot unique identifier.'
        RestMerchantsAttributes:
            properties:
                merchantName:
                    type: string
                merchantUrl:
                    type: string
                contactPersonRole:
                    type: string
                contactPersonTitle:
                    type: string
                contactPersonFirstName:
                    type: string
                contactPersonLastName:
                    type: string
                contactPersonPhone:
                    type: string
                logoUrl:
                    type: string
                publicEmail:
                    type: string
                publicPhone:
                    type: string
                description:
                    type: string
                bannerUrl:
                    type: string
                deliveryTime:
                    type: string
                latitude:
                    type: string
                longitude:
                    type: string
                faxNumber:
                    type: string
                legalInformation:
                    $ref: '#/components/schemas/RestLegalInformation'
        RestMerchantsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestMerchantsIncluded'
        RestMerchantsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - merchants
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestMerchantsRelationships'
        RestMerchantsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestMerchantAddressesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestMerchantOpeningHoursCollectionResponseData'
            type: array
        RestMerchantsRelationships:
            properties:
                merchant-addresses:
                    $ref: '#/components/schemas/RestRelationshipsData'
                merchant-opening-hours:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestMerchantsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestMerchantsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestMerchantsIncluded'
        RestMerchantsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestMerchantsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestMerchantsRelationships'
        RestOrderAddress:
            properties:
                salutation:
                    type: string
                    example: Mr
                    description: 'Salutation, for example Mr.'
                    enum:
                        - Mr
                        - Mrs
                        - Dr
                        - Ms
                firstName:
                    type: string
                    example: John
                    description: 'First Name of a customer.'
                middleName:
                    type: string
                    example: Bob
                    description: 'Middle Name of a customer.'
                lastName:
                    type: string
                    example: Doe
                    description: 'Last Name of a customer.'
                address1:
                    type: string
                    example: 'Michigan Ave'
                    description: 'Street (and House number).'
                address2:
                    type: string
                    example: '10'
                    description: 'Additional data about address. For example: &#039;House number&#039;.'
                address3:
                    type: string
                    example: 'In front of the Grant Park North Garage'
                    description: 'Additional data about address.'
                company:
                    type: string
                    example: Aldi
                    description: 'Company name.'
                city:
                    type: string
                    example: Chicago
                    description: 'City name.'
                zipCode:
                    type: string
                    example: '32836'
                    description: 'City zip code.'
                poBox:
                    type: string
                    example: '1033'
                    description: 'PO Box.'
                phone:
                    type: string
                    example: 800-123-0000
                    description: 'Phone number of customer.'
                cellPhone:
                    type: string
                    example: 800-123-0000
                    description: 'Cell phone number of customer.'
                description:
                    type: string
                    example: 'First door on the left'
                    description: 'Description of address.'
                comment:
                    type: string
                    example: 'Some text'
                    description: 'Comment regarding address.'
                email:
                    type: string
                    example: email.address@mail.com
                    description: 'Customer email address.'
                country:
                    type: string
                    example: 'United States'
                    description: 'Country name.'
                iso2Code:
                    type: string
                    format: iso2
                    description: 'Iso 2 code of country, for example: US.'
                    enum:
                        - US
                countryName:
                    type: string
                    example: 'United States'
                    description: 'Country name.'
                countryIsoCode:
                    type: string
                    format: iso2
                    example: US
                    description: 'Country ISO code.'
                    enum:
                        - US
                state:
                    type: string
                    example: Illinois
                    description: 'State name.'
                regionName:
                    type: string
                    example: California
                    description: 'State name.'
                regionIso2Code:
                    type: string
                    example: US-IL
                    description: 'Iso 2 code of region, for example: US-NY.'
                regionIsoCode:
                    type: string
                    example: CA
                    description: 'Region ISO code.'
        RestOrderCustomerAttributes:
            properties:
                phone:
                    type: string
                    example: '+14841234567'
                firstName:
                    type: string
                    example: John
                lastName:
                    type: string
                    example: Johnson
        RestOrderDetailsAttributes:
            properties:
                merchantReferences:
                    type: array
                    items:
                        type: string
                itemStates:
                    type: array
                    items:
                        type: string
                createdAt:
                    type: string
                    example: '2021-08-12T14:00:00+00:00'
                    description: 'Represents time when order was created.'
                totals:
                    $ref: '#/components/schemas/RestOrderTotalsAttributes'
                currencyIsoCode:
                    type: string
                    example: USD
                    description: 'One of the currency codes enabled for the current shop.'
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderItemsAttributes'
                expenses:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderExpensesAttributes'
                billingAddress:
                    $ref: '#/components/schemas/RestOrderAddress'
                shippingAddress:
                    $ref: '#/components/schemas/RestOrderAddress'
                priceMode:
                    type: string
                    example: NET_MODE
                    description: 'Represents order price mode.'
                    enum:
                        - NET_MODE
                        - GROSS_MODE
                payments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderPayment'
                shipments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderShipment'
                calculatedDiscounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCalculatedDiscount'
                cartNote:
                    type: string
                    example: 'Some notes'
                customer:
                    $ref: '#/components/schemas/RestOrderCustomerAttributes'
                firstDataPaymentCard:
                    $ref: '#/components/schemas/RestOrderFirstDataPaymentCardAttributes'
                timeslot:
                    $ref: '#/components/schemas/RestSalesOrderTimeslotAttributes'
                isAmended:
                    type: boolean
                    enum:
                        - true
                        - false
                amendedAt:
                    type: string
                    example: '2021-08-12T14:00:00Z'
                orderStatus:
                    type: string
                    example: Cancelled
                totalUniqueItems:
                    type: integer
                    example: '3'
                    description: 'Count number of unique items'
                totalQuantityOfItems:
                    type: integer
                    example: '5'
                    description: 'Count number of all items'
                taxCollection:
                    $ref: '#/components/schemas/RestTaxDetailCollection'
        RestOrderDetailsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
            type: array
        RestOrderDetailsRelationships:
            properties:
                merchants:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestOrderDetailsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestOrderDetailsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestOrderDetailsIncluded'
        RestOrderDetailsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - orders
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrderDetailsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestOrderDetailsRelationships'
        RestOrderExpensesAttributes:
            properties:
                type:
                    type: string
                    example: SHIPMENT_EXPENSE_TYPE
                    description: 'Expense type, for example: ALCOHOL_FEE_EXPENSE_TYPE.'
                name:
                    type: string
                    example: 'Rapid Delivery'
                    description: 'Expense name.'
                sumPrice:
                    type: integer
                    example: '399'
                    description: 'Expense summary price.'
                unitGrossPrice:
                    type: integer
                sumGrossPrice:
                    type: integer
                taxRate:
                    type: number
                unitNetPrice:
                    type: integer
                    example: '399'
                    description: 'Expense price for the net price mode.'
                sumNetPrice:
                    type: integer
                    example: '399'
                    description: 'Expense sum price for the net price mode based on item quantity.'
                canceledAmount:
                    type: integer
                unitDiscountAmountAggregation:
                    type: integer
                sumDiscountAmountAggregation:
                    type: integer
                unitTaxAmount:
                    type: integer
                sumTaxAmount:
                    type: integer
                unitPriceToPayAggregation:
                    type: integer
                    example: '399'
                    description: 'Expense price to pay.'
                sumPriceToPayAggregation:
                    type: integer
                    example: '399'
                    description: 'Expense summary price to pay.'
                taxAmountAfterCancellation:
                    type: integer
                idShipment:
                    type: integer
                idSalesExpense:
                    type: integer
                    example: '3'
                    description: 'Identifier of sales expense.'
        RestOrderFirstDataPaymentCardAttributes:
            properties:
                cardHolder:
                    type: string
                    example: 'John Smith'
                cardNumber:
                    type: string
                    example: '1234'
                expiryYear:
                    type: string
                    example: '2030'
                expiryMonth:
                    type: string
                    example: '12'
                brand:
                    type: string
                    example: VISA
        RestOrderItemMetadata:
            properties:
                superAttributes:
                    type: array
                    items: {  }
                image:
                    type: string
                    example: 'https://dm.cms.aldi.cx/is/image/dev1amer/product/jpg/scaleWidth/{width}/74d28097-778e-410b-8736-d2318f6bc368.'
        RestOrderItemProductOptions:
            properties:
                optionGroupName:
                    type: string
                    example: Insurance
                    description: 'Product option group name.'
                sku:
                    type: string
                    example: OP_insurance
                    description: 'Product option SKU.'
                optionName:
                    type: string
                    example: 'Two (2) year insurance coverage'
                    description: 'Product option name.'
                price:
                    type: integer
                    example: '50'
                    description: 'Product option price.'
        RestOrderItemsAttributes:
            properties:
                merchantReference:
                    type: string
                    example: '474_002'
                    description: 'Merchant reference the item belongs to.'
                state:
                    type: string
                    example: 'payment not cancelled'
                    description: 'OMS state description.'
                name:
                    type: string
                    example: 'Chocolate Creme Pie'
                    description: 'Product name.'
                sku:
                    type: string
                    example: '4099100172416'
                    description: 'Product SKU.'
                sumPrice:
                    type: integer
                    example: '549'
                    description: 'Sum gross or sum net unit price based on the selected cart price mode.'
                quantity:
                    type: integer
                    example: '1'
                    description: 'Product quantity.'
                metadata:
                    $ref: '#/components/schemas/RestOrderItemMetadata'
                calculatedDiscounts:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestCalculatedDiscount'
                unitGrossPrice:
                    type: integer
                sumGrossPrice:
                    type: integer
                taxRate:
                    type: number
                    example: '5.5'
                    description: 'Tax rate.'
                unitNetPrice:
                    type: integer
                    example: '549'
                    description: 'Concrete product price for the net price mode.'
                sumNetPrice:
                    type: integer
                    example: '549'
                    description: 'Concrete product sum price for the net price mode based on item quantity.'
                unitPrice:
                    type: integer
                    example: '549'
                    description: 'Gross or net unit price based on the selected cart price mode.'
                unitTaxAmountFullAggregation:
                    type: integer
                sumTaxAmountFullAggregation:
                    type: integer
                refundableAmount:
                    type: integer
                    example: '549'
                    description: 'Amount that possibly could be refunded.'
                canceledAmount:
                    type: integer
                sumSubtotalAggregation:
                    type: integer
                    example: '549'
                    description: 'Sum of sumPrice and sumProductOptionPriceAggregation.'
                unitSubtotalAggregation:
                    type: integer
                    example: '549'
                    description: 'Sum of unitPrice and unitProductOptionPriceAggregation.'
                unitProductOptionPriceAggregation:
                    type: integer
                    example: '549'
                    description: 'Aggregated product options price selected for the item.'
                sumProductOptionPriceAggregation:
                    type: integer
                    example: '549'
                    description: 'Aggregated product options price selected for the item multiplied by product quantity.'
                unitExpensePriceAggregation:
                    type: integer
                sumExpensePriceAggregation:
                    type: integer
                unitDiscountAmountAggregation:
                    type: integer
                sumDiscountAmountAggregation:
                    type: integer
                unitDiscountAmountFullAggregation:
                    type: integer
                sumDiscountAmountFullAggregation:
                    type: integer
                unitPriceToPayAggregation:
                    type: integer
                sumPriceToPayAggregation:
                    type: integer
                taxRateAverageAggregation:
                    type: number
                    example: '0.00'
                    description: 'Average aggregation of a tax rate.'
                taxAmountAfterCancellation:
                    type: integer
                orderReference:
                    type: string
                    example: US--1
                    description: 'Order reference, for example: US--1.'
                uuid:
                    type: string
                    example: 42de8c95-69a7-56b1-b43e-ce876ca79458
                    description: 'Unique identifier of item.'
                isReturnable:
                    type: boolean
                    enum:
                        - true
                        - false
                idShipment:
                    type: integer
                amount:
                    type: number
                salesUnit:
                    $ref: '#/components/schemas/RestOrdersSalesUnitAttributes'
                productOptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderItemProductOptions'
                originalItem:
                    $ref: '#/components/schemas/RestOriginalItemAttributes'
                uuids:
                    type: array
                    items:
                        type: string
                itemStatus:
                    type: string
                    example: Cancelled
                bundleItemIdentifier:
                    type: string
                    example: '1'
                    description: 'Configurable bundle item identifier.'
                relatedBundleItemIdentifier:
                    type: string
                    example: '1'
                    description: 'Related configurable bundle item identifier.'
                unitBottleDepositPriceAggregation:
                    type: integer
                sumBottleDepositPriceAggregation:
                    type: integer
                productOfferReference:
                    type: string
                    example: 4099100172416-002
                urlSlugText:
                    type: string
                    example: fresh-never-frozen-tilapia-fillets-4099100172416
        RestOrderPayment:
            properties:
                amount:
                    type: integer
                    example: '8823'
                    description: 'Order payment price.'
                paymentProvider:
                    type: string
                    example: firstData
                    description: 'Name of payment provider.'
                paymentMethod:
                    type: string
                    example: firstDataCreditCard
                    description: 'Name of payment method.'
        RestOrderShipment:
            properties:
                shipmentMethodName:
                    type: string
                    example: 'Rapid Delivery'
                    description: 'Name of order shipment method.'
                carrierName:
                    type: string
                    example: Instacart
                    description: 'Name of order carrier.'
                deliveryTime:
                    type: integer
                    example: '2021-09-10 09:10:18'
                defaultGrossPrice:
                    type: integer
                    example: '299'
                defaultNetPrice:
                    type: integer
                    example: '399'
                    description: 'Default net price.'
                currencyIsoCode:
                    type: string
                    example: USD
                    description: 'One of the currency codes enabled for the current shop.'
        RestOrderTotalsAttributes:
            properties:
                expenseTotal:
                    type: integer
                    example: '500'
                    description: 'Total sum of all expenses, for example, delivery.'
                discountTotal:
                    type: integer
                    example: '250'
                    description: 'Total sum of all applied product discounts.'
                taxTotal:
                    type: integer
                    example: '1000'
                    description: 'Total sum of all taxes.'
                subtotal:
                    type: integer
                    example: '3294'
                    description: 'Sum of sumSubtotalAggregation of all items.'
                grandTotal:
                    type: integer
                    example: '3294'
                    description: 'Grand total of all items and expanses.'
                canceledTotal:
                    type: integer
                    example: '0'
                    description: 'Represents summary of all cancelled totals.'
                remunerationTotal:
                    type: integer
                    example: '0'
                    description: 'Represents remuneration amount total.'
                authorizedAmount:
                    type: integer
                bottleDepositTotal:
                    type: integer
                    example: '36'
                    description: 'Sum of all bottle deposits of all items.'
                tipTotal:
                    type: integer
                    example: '390'
                    description: 'Tip amount calculated based on cart subtotal and tip amount percentage for delivery service.'
        RestOrdersAttributes:
            properties:
                merchantReferences:
                    type: array
                    items:
                        type: string
                itemStates:
                    type: array
                    items:
                        type: string
                createdAt:
                    type: string
                    example: '2021-08-12T14:00:00+00:00'
                    description: 'Represents time when order was created.'
                totals:
                    $ref: '#/components/schemas/RestOrderTotalsAttributes'
                currencyIsoCode:
                    type: string
                    example: USD
                    description: 'One of the currency codes enabled for the current shop.'
                priceMode:
                    type: string
                    example: NET_MODE
                    description: 'Represents order price mode.'
                    enum:
                        - NET_MODE
                        - GROSS_MODE
                timeslot:
                    $ref: '#/components/schemas/RestSalesOrderTimeslotAttributes'
                orderStatus:
                    type: string
                    example: Cancelled
                totalUniqueItems:
                    type: integer
                    example: '3'
                    description: 'Count number of unique items'
                totalQuantityOfItems:
                    type: integer
                    example: '5'
                    description: 'Count number of all items'
                shipments:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrderShipment'
                taxCollection:
                    $ref: '#/components/schemas/RestTaxDetailCollection'
        RestOrdersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestOrdersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestOrdersIncluded'
        RestOrdersCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - orders
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestOrdersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestOrdersRelationships'
        RestOrdersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
            type: array
        RestOrdersProductMeasurementUnitsAttributes:
            properties:
                name:
                    type: string
                    example: measurement_units.item.name
                    description: 'Name of Measurement Unit'
                code:
                    type: string
                    example: ITEM
                    description: 'Code of Measurement Unit'
        RestOrdersRelationships:
            properties:
                merchants:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestOrdersSalesUnitAttributes:
            properties:
                conversion:
                    type: integer
                    example: '1'
                    description: 'Conversion or order sales unit.'
                precision:
                    type: integer
                    example: '1000'
                    description: 'Precision or order sales unit.'
                productMeasurementUnit:
                    $ref: '#/components/schemas/RestOrdersProductMeasurementUnitsAttributes'
        RestOriginalItemAttributes:
            properties:
                productOfferReference:
                    type: string
                    example: 4099100172416-002
        RestPaymentMethod:
            properties:
                paymentMethodName:
                    type: string
                    example: firstDataCreditCard
                paymentProviderName:
                    type: string
                    example: firstData
                requiredRequestData:
                    type: array
                    items: {  }
        RestPaymentMethodsAttributes:
            properties:
                paymentMethodName:
                    type: string
                paymentProviderName:
                    type: string
                priority:
                    type: integer
                requiredRequestData:
                    type: array
                    items: {  }
        RestPaymentMethodsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - payment-methods
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestPaymentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestPaymentProvider:
            properties:
                paymentProviderName:
                    type: string
                    example: FirstData
                paymentMethods:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestPaymentMethod'
        RestPaymentTransfer:
            properties:
                paymentProviderName:
                    type: string
                    example: firstData
                    enum:
                        - firstData
                paymentMethodName:
                    type: string
                    example: firstDataCreditCard
                    enum:
                        - firstDataCreditCard
            required:
                - paymentProviderName
                - paymentMethodName
        RestProductConcretePackagingUnitsAttributes:
            properties:
                typeName:
                    type: string
                    example: Weight
                defaultAmount:
                    type: number
                    example: '0.1'
                isAmountVariable:
                    type: boolean
                    example: 'true'
                    enum:
                        - true
                        - false
                amountMin:
                    type: number
                    example: '0.1'
                amountMax:
                    type: number
                    example: '10.3'
                amountInterval:
                    type: number
                    example: '0.1'
        RestProductImageSet:
            properties:
                name:
                    type: string
                images:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestImagesAttributes'
        RestProductImageSetsAttributes:
            properties:
                imageSets:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductImageSet'
        RestProductImageSetsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
        RestProductImageSetsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - concrete-product-image-sets
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductImageSetsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductMeasurementUnitsAttributes:
            properties:
                name:
                    type: string
                defaultPrecision:
                    type: integer
        RestProductMeasurementUnitsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductMeasurementUnitsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductMeasurementUnitsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductOfferPagination:
            properties:
                numFound:
                    type: integer
                    example: '162'
                    description: 'Found results quantity.'
                currentPage:
                    type: integer
                    example: '6'
                    description: 'Current pagination page.'
                maxPage:
                    type: integer
                    example: '6'
                    description: 'Max amount of pages available.'
                currentItemsPerPage:
                    type: integer
                    example: '32'
                    description: 'Quantity of the items per page.'
                    enum:
                        - '16'
                        - '32'
                        - '48'
                config:
                    $ref: '#/components/schemas/RestCatalogSearchProductOfferPaginationConfig'
        RestProductOfferPriceAttributes:
            properties:
                priceTypeName:
                    type: string
                netAmount:
                    type: integer
                grossAmount:
                    type: integer
                currency:
                    $ref: '#/components/schemas/RestCurrency'
                bottleDeposit:
                    type: integer
                relevantNetAmount:
                    type: integer
                relevantGrossAmount:
                    type: integer
                serviceType:
                    type: string
        RestProductOfferPricesAttributes:
            properties:
                price:
                    type: integer
                prices:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductOfferPriceAttributes'
        RestProductOfferPricesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductOfferPricesCollectionResponseData'
        RestProductOfferPricesCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - product-offer-prices
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductOfferPricesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestProductOfferSort:
            properties:
                sortParamNames:
                    type: array
                    items: {  }
                sortParamLocalizedNames:
                    type: array
                    items: {  }
                currentSortParam:
                    type: string
                    example: price_desc
                    description: 'Parameter that was used for data sorting.'
                    enum:
                        - rating
                        - name_asc
                        - name_desc
                        - price_asc
                        - price_desc
                currentSortOrder:
                    type: string
                    example: desc
                    description: 'Sort order direction.'
                    enum:
                        - asc
                        - desc
        RestProductOffersAttributes:
            properties:
                merchantSku:
                    type: string
                merchantReference:
                    type: string
                isDefault:
                    type: boolean
                    enum:
                        - true
                        - false
                sku:
                    type: string
                comparisonPrice:
                    type: string
                quantityMax:
                    type: integer
                quantityMin:
                    type: integer
                quantityInterval:
                    type: integer
        RestProductOffersCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductOffersCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestProductOffersIncluded'
        RestProductOffersCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - alternative-product-offers
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductOffersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestProductOffersRelationships'
        RestProductOffersIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestMerchantsCollectionResponseData'
                    -
                        $ref: '#/components/schemas/ConcreteProductsRestResponseData'
                    -
                        $ref: '#/components/schemas/RestProductOfferPricesCollectionResponseData'
                    -
                        $ref: '#/components/schemas/RestProductImageSetsCollectionResponseData'
            type: array
        RestProductOffersRelationships:
            properties:
                merchants:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-products:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-offer-prices:
                    $ref: '#/components/schemas/RestRelationshipsData'
                concrete-product-image-sets:
                    $ref: '#/components/schemas/RestRelationshipsData'
                product-labels:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestProductOffersResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestProductOffersResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestProductOffersIncluded'
        RestProductOffersResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductOffersAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestProductOffersRelationships'
        RestProductPriceAttributes:
            properties:
                priceTypeName:
                    type: string
                netAmount:
                    type: integer
                grossAmount:
                    type: integer
                currency:
                    $ref: '#/components/schemas/RestCurrency'
                bottleDeposit:
                    type: integer
        RestProductPricesAttributes:
            properties:
                price:
                    type: integer
                prices:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductPriceAttributes'
        RestProductPricesCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestProductPricesCollectionResponseData'
        RestProductPricesCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - concrete-product-prices
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestProductPricesAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestPromotionalItemsAttributes:
            properties:
                sku:
                    type: string
                quantity:
                    type: integer
        RestPromotionalItemsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - promotional-items
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestPromotionalItemsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestRangeSearchResult:
            properties:
                name:
                    type: string
                    example: price-DEFAULT-USD-NET_MODE
                    description: 'Range search result name.'
                localizedName:
                    type: string
                    example: 'Default usd mode mode'
                    description: 'Range search result localized name.'
                min:
                    type: number
                    example: '29'
                    description: 'Facet minimum value.'
                max:
                    type: number
                    example: '4999'
                    description: 'Facet maximum value.'
                activeMin:
                    type: number
                    example: '100'
                    description: 'Facet active minimum value.'
                activeMax:
                    type: number
                    example: '200'
                    description: 'Facet active maximum value.'
                docCount:
                    type: integer
                    example: '0'
                    description: 'Count of the docs.'
                config:
                    $ref: '#/components/schemas/RestFacetConfig'
        RestRefreshTokensRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestRefreshTokensRequestData'
        RestRefreshTokensRequestAttributes:
            properties:
                refreshToken:
                    type: string
            required:
                - refreshToken
        RestRefreshTokensRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - refresh-tokens
                attributes:
                    $ref: '#/components/schemas/RestRefreshTokensRequestAttributes'
        RestRelationships:
            properties:
                id:
                    type: string
                type:
                    type: string
        RestRelationshipsData:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestRelationships'
        RestReturnItemRequestAttributes:
            properties:
                salesOrderItemUuid:
                    type: string
                reason:
                    type: string
        RestReturnItemRequestRequestAttributes:
            properties:
                salesOrderItemUuid:
                    type: string
                reason:
                    type: string
        RestReturnReasonsAttributes:
            properties:
                reason:
                    type: string
        RestReturnReasonsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestReturnReasonsCollectionResponseData'
        RestReturnReasonsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - return-reasons
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestReturnReasonsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestReturnRequestAttributes:
            properties:
                store:
                    type: string
                returnItems:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestReturnItemRequestAttributes'
        RestReturnRequestCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestReturnRequestCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestReturnRequestIncluded'
        RestReturnRequestCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - returns
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestReturnRequestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestReturnRequestRelationships'
        RestReturnRequestIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestReturnsResponseData'
            type: array
        RestReturnRequestRelationships:
            properties:
                return-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestReturnRequestRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestReturnRequestRequestData'
        RestReturnRequestRequestAttributes:
            properties:
                store:
                    type: string
                returnItems:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestReturnItemRequestRequestAttributes'
        RestReturnRequestRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - returns
                attributes:
                    $ref: '#/components/schemas/RestReturnRequestRequestAttributes'
        RestReturnRequestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestReturnRequestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestReturnRequestIncluded'
        RestReturnRequestResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestReturnRequestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestReturnRequestRelationships'
        RestReturnTotalsAttributes:
            properties:
                refundTotal:
                    type: integer
                remunerationTotal:
                    type: integer
        RestReturnsAttributes:
            properties:
                returnReference:
                    type: string
                store:
                    type: string
                customerReference:
                    type: string
                returnTotals:
                    $ref: '#/components/schemas/RestReturnTotalsAttributes'
        RestReturnsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestReturnsResponseData'
            type: array
        RestReturnsRelationships:
            properties:
                return-items:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestReturnsResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestReturnsResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
                included:
                    $ref: '#/components/schemas/RestReturnsIncluded'
        RestReturnsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - return-items
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestReturnsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestReturnsRelationships'
        RestSalesOrderTimeslotAttributes:
            properties:
                startTime:
                    type: string
                    format: datetime
                    example: '2024-02-12T15:19:21+00:00'
                    description: 'Timeslot start time.'
                endTime:
                    type: string
                    format: datetime
                    example: '2024-08-12T15:19:21+00:00'
                    description: 'Timeslot end time.'
        RestSalesUnitsAttributes:
            properties:
                conversion:
                    type: integer
                precision:
                    type: integer
                isDisplayed:
                    type: boolean
                    enum:
                        - true
                        - false
                isDefault:
                    type: boolean
                    enum:
                        - true
                        - false
                productMeasurementUnitCode:
                    type: string
        RestSalesUnitsCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestSalesUnitsCollectionResponseData'
                included:
                    $ref: '#/components/schemas/RestSalesUnitsIncluded'
        RestSalesUnitsCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - sales-units
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSalesUnitsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
                relationships:
                    $ref: '#/components/schemas/RestSalesUnitsRelationships'
        RestSalesUnitsIncluded:
            items:
                oneOf:
                    -
                        $ref: '#/components/schemas/RestProductMeasurementUnitsResponseData'
            type: array
        RestSalesUnitsRelationships:
            properties:
                product-measurement-units:
                    $ref: '#/components/schemas/RestRelationshipsData'
        RestSalesforceAddressAttributes:
            properties:
                firstName:
                    type: string
                    example: Spencor
                lastName:
                    type: string
                    example: Hopkin
                address1:
                    type: string
                    example: '371, North Ave'
                address2:
                    type: string
                    example: 'appartment 321'
                zipCode:
                    type: string
                    example: 34521-4563
                city:
                    type: string
                    example: Chicago
                country:
                    type: string
                    example: 'The United States of America'
                iso2Code:
                    type: string
                    example: US
                regionIso2Code:
                    type: string
                    example: CA
                countryName:
                    type: string
                    example: 'United States'
                    description: 'Country name.'
                countryIsoCode:
                    type: string
                    example: US
                    description: 'Country ISO code.'
                regionIsoCode:
                    type: string
                    example: CA
                    description: 'Region ISO code.'
        RestSalesforceAddressCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestSalesforceAddressCollectionResponseData'
        RestSalesforceAddressCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - addresses
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSalesforceAddressAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestSalesforceAddressRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestSalesforceAddressRequestData'
        RestSalesforceAddressRequestAttributes:
            properties:
                firstName:
                    type: string
                    example: Spencor
                lastName:
                    type: string
                    example: Hopkin
                address1:
                    type: string
                    example: '371, North Ave'
                address2:
                    type: string
                    example: 'appartment 321'
                zipCode:
                    type: string
                    example: 34521-4563
                city:
                    type: string
                    example: Chicago
                iso2Code:
                    type: string
                    example: US
                regionIso2Code:
                    type: string
                    example: CA
                countryIsoCode:
                    type: string
                    example: US
                    description: 'Country ISO code.'
                regionIsoCode:
                    type: string
                    example: CA
                    description: 'Region ISO code.'
            required:
                - firstName
                - lastName
                - address1
                - zipCode
                - city
                - iso2Code
                - regionIso2Code
                - countryIsoCode
                - regionIsoCode
        RestSalesforceAddressRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - addresses
                attributes:
                    $ref: '#/components/schemas/RestSalesforceAddressRequestAttributes'
        RestSalesforceAddressResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestSalesforceAddressResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestSalesforceAddressResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestSalesforceAddressAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestSearchKeywordRedirectAttributes:
            properties:
                redirectUrl:
                    type: string
                    example: 'https://www.test-offer-url'
                    description: 'Url for redirect.'
                name:
                    type: string
                    example: test-offer
                    description: 'Name of the url.'
        RestShipmentMethod:
            properties:
                id:
                    type: integer
                    example: '3'
                name:
                    type: string
                    example: 'Rapid Delivery'
                carrierName:
                    type: string
                    example: Instacart
                price:
                    type: integer
                    example: '399'
                taxRate:
                    type: number
                deliveryTime:
                    type: integer
                    example: '1631283945'
                currencyIsoCode:
                    type: string
                    example: USD
        RestShipmentMethodsAttributes:
            properties:
                name:
                    type: string
                carrierName:
                    type: string
                deliveryTime:
                    type: integer
                price:
                    type: integer
                currencyIsoCode:
                    type: string
        RestShipmentMethodsResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - shipment-methods
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestShipmentMethodsAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestShipmentTransfer:
            properties:
                idShipmentMethod:
                    type: integer
                    example: '3'
        RestShipmentsTransfer:
            properties:
                shippingAddress:
                    $ref: '#/components/schemas/RestAddressTransfer'
                items:
                    type: array
                    items:
                        type: string
                idShipmentMethod:
                    type: integer
                    example: '3'
                requestedDeliveryDate:
                    type: string
                    example: '2022-09-30'
        RestTaxDetail:
            properties:
                taxAmount:
                    type: number
                    example: '500.25'
                    description: 'Tax amount calculated by external system.'
                taxRate:
                    type: number
                    example: '5.5'
                    description: 'Tax rate.'
                taxName:
                    type: string
                    example: 'Very important tax'
                    description: 'Tax name.'
        RestTaxDetailCollection:
            properties:
                taxes:
                    type: array
                    items:
                        $ref: '#/components/schemas/RestTaxDetail'
        RestTokenAttributes:
            properties:
                grantType:
                    type: string
                username:
                    type: string
                password:
                    type: string
        RestTokenRequest:
            properties:
                data:
                    $ref: '#/components/schemas/RestTokenRequestData'
        RestTokenRequestAttributes:
            properties: {  }
        RestTokenRequestData:
            properties:
                type:
                    type: string
                    enum:
                        - token
                attributes:
                    $ref: '#/components/schemas/RestTokenRequestAttributes'
        RestTokenResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestTokenResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseAttributes:
            properties:
                tokenType:
                    type: string
                expiresIn:
                    type: string
                accessToken:
                    type: string
                refreshToken:
                    type: string
        RestTokenResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - token
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/RestTokenAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseResponse:
            properties:
                data:
                    $ref: '#/components/schemas/RestTokenResponseResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestTokenResponseResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                    nullable: true
                attributes:
                    $ref: '#/components/schemas/RestTokenResponseAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        RestWeekdaySchedule:
            properties:
                day:
                    type: string
                    example: MONDAY
                timeFrom:
                    type: string
                    example: '09:00:00+00:00'
                timeTo:
                    type: string
                    example: '10:00:00+00:00'
        StoreCountryRestAttributes:
            properties:
                iso2Code:
                    type: string
                iso3Code:
                    type: string
                name:
                    type: string
                postalCodeMandatory:
                    type: boolean
                    enum:
                        - true
                        - false
                postalCodeRegex:
                    type: string
                regions:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreRegionRestAttributes'
                phoneNumberRegex:
                    type: string
                countryName:
                    type: string
                    example: 'United States'
                    description: 'Country name.'
                countryIsoCode:
                    type: string
                    example: US
                    description: 'Country ISO code.'
        StoreCurrencyRestAttributes:
            properties:
                code:
                    type: string
                name:
                    type: string
        StoreLocaleRestAttributes:
            properties:
                code:
                    type: string
                name:
                    type: string
        StoreRegionRestAttributes:
            properties:
                iso2Code:
                    type: string
                name:
                    type: string
                regionName:
                    type: string
                    example: California
                    description: 'State name.'
                regionIsoCode:
                    type: string
                    example: CA
                    description: 'Region ISO code.'
        StoresRestAttributes:
            properties:
                timeZone:
                    type: string
                defaultCurrency:
                    type: string
                currencies:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreCurrencyRestAttributes'
                locales:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreLocaleRestAttributes'
                countries:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoreCountryRestAttributes'
        StoresRestCollectionResponse:
            properties:
                data:
                    type: array
                    items:
                        $ref: '#/components/schemas/StoresRestCollectionResponseData'
        StoresRestCollectionResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - stores
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/StoresRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
        StoresRestResponse:
            properties:
                data:
                    $ref: '#/components/schemas/StoresRestResponseData'
                links:
                    $ref: '#/components/schemas/RestLinks'
        StoresRestResponseData:
            properties:
                type:
                    type: string
                    enum:
                        - null
                id:
                    type: string
                attributes:
                    $ref: '#/components/schemas/StoresRestAttributes'
                links:
                    $ref: '#/components/schemas/RestLinks'
    parameters:
        acceptLanguage:
            name: Accept-Language
            in: header
            description: 'Locale value relevant for the store.'
            schema:
                type: string
            required: false
